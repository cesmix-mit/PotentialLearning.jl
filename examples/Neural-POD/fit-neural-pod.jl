# Run this script:
#   $ cd examples/Neural-POD
#   $ julia --project=../ --threads=4
#   julia> include("fit-neural-pod.jl")

push!(Base.LOAD_PATH, "../../")

using AtomsBase
using InteratomicPotentials, InteratomicBasisPotentials
using PotentialLearning
using Unitful, UnitfulAtomic
using LinearAlgebra
using Random
include("../utils/utils.jl")
include("PL-IBS-Ext.jl")
include("../PCA-ACE/pca.jl")


# Setup experiment #############################################################

# Experiment folder
path = "HfO2-NeuralPOD/"
run(`mkdir -p $path/`)

# Fix random seed
Random.seed!(100)


# Define training and test configuration datasets ##############################

# Load complete configuration dataset
ds_train_path = "data/HfO2_mp352_ads_form_sorted.extxyz"
conf_train = load_data(ds_train_path, uparse("eV"), uparse("Å"))

ds_test_path = "data/Hf_mp103_ads_form_sorted.extxyz"
conf_test = load_data(ds_test_path, uparse("eV"), uparse("Å"))

n_train, n_test = length(conf_train), length(conf_test)


# Define dataset subselector ###################################################

# Subselector, option 1: RandomSelector
# dataset_selector = RandomSelector(length(conf_train); batch_size = 100)

# Subselector, option 2: DBSCANSelector
#ε, min_pts, sample_size = 0.05, 5, 3
#dataset_selector = DBSCANSelector(  conf_train,
#                                    ε,
#                                    min_pts,
#                                    sample_size)

# Subselector, option 3: kDPP + ACE (requires calculation of energy descriptors)
#pod = POD(  species = [:Hf, :O],
#            rin = 1.0,
#            rcut = 7.5,
#            bessel_polynomial_degree = 4,
#            inverse_polynomial_degree = 10,
#            onebody = 1,
#            twobody_number_radial_basis_functions = 2,
#            threebody_number_radial_basis_functions = 2,
#            threebody_angular_degree = 2,
#            fourbody_number_radial_basis_functions = 0,
#            fourbody_angular_degree = 0,
#            true4BodyDesc = 0,
#            fivebody_number_radial_basis_functions = 0,
#            fivebody_angular_degree = 0,
#            sixbody_number_radial_basis_functions = 0,
#            sixbody_angular_degree = 0,
#            sevenbody_number_radial_basis_functions = 0,
#            sevenbody_angular_degree = 0)
#path = "../../../POD/get_descriptors/train/"
#e_descr = compute_local_descriptors(conf_train, pod, T = Float32, path = path)
#conf_train_kDPP = DataSet(conf_train .+ e_descr)
#dataset_selector = kDPP(  conf_train_kDPP,
#                          GlobalMean(),
#                          DotProduct();
#                          batch_size = 100)

## Subsample trainig dataset
#inds = PotentialLearning.get_random_subset(dataset_selector)
#conf_train = conf_train[inds]
#GC.gc()


# Define IAP model #############################################################

# Define POD
pod = POD(  species = [:Hf, :O],
            rin = 1.0,
            rcut = 7.5,
            bessel_polynomial_degree = 4,
            inverse_polynomial_degree = 10,
            onebody = 1,
            twobody_number_radial_basis_functions = 2,
            threebody_number_radial_basis_functions = 3,
            threebody_angular_degree = 2,
            fourbody_number_radial_basis_functions = 2,
            fourbody_angular_degree = 1,
            true4BodyDesc = 1,
            fivebody_number_radial_basis_functions = 0,
            fivebody_angular_degree = 0,
            sixbody_number_radial_basis_functions = 0,
            sixbody_angular_degree = 0,
            sevenbody_number_radial_basis_functions = 0,
            sevenbody_angular_degree = 0)
@save_var path pod

# Update training dataset by adding energy descriptors
println("Computing energy descriptors of training dataset...")
descr_path = "../../../POD/get_descriptors/train/"
e_descr_train = compute_local_descriptors(conf_train,
                                          pod,
                                          T = Float32,
                                          path = descr_path)
ds_train = DataSet(conf_train .+ e_descr_train)

# Load global energy descriptors
#gd = []
#open("global_energy_descriptors.dat") do f
#    linecounter = 0
#    for l in eachline(f)
#        d = parse.(Float32, split(replace(l, "\n" => ""), " "))
#        push!(gd, d)
#        linecounter += 1
#    end
#end
#n_desc = length(gd[1])


# Dimension reduction of energy descriptors of training dataset ######
reduce_descriptors = true
n_desc = length(e_descr_train[1][1])
println("n_desc: $n_desc")
if reduce_descriptors
    n_desc = convert(Int, n_desc ÷ 2)
    pca = PCAState(tol = n_desc)
    fit!(ds_train, pca)
    transform!(ds_train, pca)
end
println("n_desc: $n_desc")

# Define neural network model
nn = Chain( Dense(n_desc,16,Flux.sigmoid; init = Flux.glorot_normal),
            Dense(16,16,Flux.sigmoid; init = Flux.glorot_normal),
            Dense(16,1; init = Flux.glorot_normal))
npod = NNIAP(nn, pod)

#ps, re = Flux.destructure(nn)
#ps = Float32[-0.5078594, 4.7428865, -1.1030041, 4.439709, 3.0022492, -0.08816106, 0.74360263, 2.1311944, -0.3466583, 2.7307153, -0.8030382, 0.121486716, -1.1894419, 3.291626, -1.5498431, 7.106419, 0.9356834, 8.574214, 3.1659696, -2.5887697, 3.2925973, -2.4198706, 9.855435, -1.965189, -0.3604173, -4.247384, 2.882213, -1.4983269, 1.5265805, -1.1337237, -2.4000916, 3.1774049, 3.248854, 1.695435, 5.706361, -1.5124079, -0.6263405, -3.773631, 5.5365796, -8.308433, 0.36566305, -2.5060978, 0.5801805, 0.87079567, -0.16266575, 1.6780626, 0.5259318, 4.4158435, 2.3220375, -7.4194584, 2.9927497, -0.6044522, 1.3934212, -5.0254593, -13.013283, -5.979727, -1.120082, -3.089196, -1.7474879, -0.7914749, -3.0332942, -1.7230574, 4.2701845, 4.042259, -1.0511642, 1.2199578, -4.0678897, 0.66378504, -1.7817463, 0.4063531, 5.3510175, 1.8890105, -2.8136542, 4.104283, 0.68201, -2.7253063, 0.20251158, 4.3720145, 0.30928594, 0.5131115, -5.3205385, -0.31740403, -1.1194385, 1.1375254, -4.975414, 2.8139315, -0.31687662, -6.1841, 1.5023149, -9.52001, 2.2904422, 1.5433431, 0.45665115, 2.2883933, -1.1515616, -1.9029902, -9.46025, -1.5942763, 0.43851706, -6.028243, 3.2953672, 1.6703689, 4.298007, -7.625912, -1.9694316, -0.24149996, -1.2756584, 1.621426, -0.8885407, -5.0559564, -0.03271206, 0.11509279, -0.47432467, -2.0914268, 4.229138, -0.38781622, 0.07885556, -1.8763249, -0.48376244, -7.337488, -1.8920673, 0.6105267, 4.7004223, 4.632054, -0.95168847, 1.5237157, 0.5817299, 2.676189, -4.6720943, -1.4326447, 0.50743747, -5.660675, -0.58451706, 0.4633348, -0.15699156, -5.059503, -0.41721565, -0.8293796, 2.9838748, -0.08000009, -0.1823941, 1.5581669, 1.896816, 3.1861172, -1.7837445, -0.34061167, -1.7997004, -2.4831321, -0.9359073, -6.8811913, -5.9207397, -1.4043481, 0.16915107, 0.24085534, 3.8250601, 0.36601794, -2.0738971, 2.7412694, 1.2560058, 2.8330147, -8.00799, -4.1661863, -0.40608802, 0.6487137, 2.619385, -6.467038, 2.907313, -4.9789977, 1.2230147, -2.5443223, 1.0802236, -5.7464767, 1.0246837, -1.9935529, 4.1059713, -3.696676, -1.5568689, -0.6513871, 0.50822645, -3.2194166, -5.9577093, -1.6540867, -3.6325305, -5.1725893, -2.7397947, 3.6628044, 8.612455, -0.21813445, -0.7642745, 1.2322886, 6.6480265, 3.5645418, 5.0655284, 3.8429544, -2.5764303, -4.23523, -14.323048, -9.843257, 0.03974074, -0.46810964, -2.5017755, 1.6617349, -7.3941894, 2.1340256, 2.490804, 3.7136168, -1.83139, 4.6245227, -3.5676649, -1.1861842, 3.476873, 3.5896542, -4.7299724, -6.993605, 5.6614575, -0.7941605, 3.474504, 5.218665, -0.26069131, 1.1845639, 3.286634, 3.2655075, 0.48763746, 9.630347, -3.3774514, 0.02447316, 0.2641091, -5.5134153, -7.989529, -3.1706128, -0.21897826, -1.9055347, -0.33816674, 2.9835072, -1.9784402, -2.764462, 1.8344808, 2.5342646, 3.6450453, 2.2839491, 4.333886, 9.353687, -1.2064143, 2.818726, 0.922559, 0.47069898, 1.4019871, 7.613948, -0.66777295, -0.6642903, -3.044586, 1.1601912, 1.788491, 0.9292626, -5.057348, -1.3736572, 3.4634511, -4.844416, -2.9828298, 0.99338883, 0.8740522, 2.9532733, 6.7347765, 0.78488827, -3.8168998, 6.369897, -3.628926, -4.0807033, 1.226106, -0.6619295, 3.3794806, -5.41962, -1.7987357, -2.5897346, 4.4676847, -2.5487154, 6.570716, 2.5247612, 4.749158, -2.5986738, 0.08385368, -1.9176407, 3.3068488, 0.66572607, -2.5451045, -2.0916882, -5.0019054, 4.9964776, -11.404574, -3.4449596, -4.884253, -1.8378369, 2.8134592, 0.40394652, 1.0215662, -2.2496336, -1.5103214, 2.0954666, 3.7741039, 6.266737, -2.4962122, -4.4629393, -1.856476, 1.675628, -7.082895, 2.3781464, -1.1623837, -1.6507615, -0.6470778, 2.6459193, -4.2053576, 0.00051269133, -2.337335, -4.049891, 0.75705993, -1.130516, 3.1773663, 6.8486757, 0.3091814, -1.1649646, -2.959057, 1.0296979, -1.7511482, 8.1973095, -6.908661, -0.4697899, 6.0314317, 3.0476573, -2.410566, 7.3546667, -2.3395107, 7.6489563, -2.8617618, 4.633082, -2.0232816, 5.20167, 4.726665, -4.905332, 2.547966, -3.704034, -0.13397273, -0.8264038, 1.792797, 1.4191, -1.1819094, -6.665486, -2.9503255, -2.2481666, -2.4279792, -3.415931, -0.37586972, -0.44093618, -4.3008685, -1.2909493, -2.189224, 0.8515669, -2.9219487, 6.747398, -1.7190608, 7.262942, -1.7660322, 0.53329116, -1.0146066, -2.606375, -2.001459, 2.98572, 3.52163, -1.0125226, -6.6124663, -1.7529799, 2.5537913, -3.0877209, 6.7334995, 0.2266399, -5.7816057, -3.9160118, 1.8394166, 0.6864148, 5.5241494, 8.059957, -1.0442929, -0.13274235, 2.3321016, 3.9684231, -1.6238722, 3.4915705, -1.7749523, -3.4333565, 1.7281647, -3.427236, 2.6125891, -0.15732376, 0.644249, -7.9487896, 3.6558897, -1.877743, -1.3141888, -0.09658809, 2.356076, -7.4671216, -2.5261939, 3.7635612, 2.6072903, -3.753438, -6.9960985, -2.6448102, 1.477495, -5.0149827, 0.7948126, -8.81873, -5.9113026, 3.7873547, 0.15918806, -6.3391194, -3.792356, -0.57446384, -1.6496509, 3.4578583, -2.526858, 3.4622722, -2.411735, -0.038924653, 1.7533026, 2.9027555, -1.2722567, 2.67684, -0.75613827, -6.4193416, -0.43909767, 1.6890993, -2.672257, -1.7001516, -0.6404119, -1.8733329, 2.618325, -2.2505817, 1.9858, 7.422362, -7.8706384, 9.040844, 0.31906283, -1.4509425, 2.0459192, 9.37931, -0.5000184, 0.43882838, -1.4790722, 4.742619, 0.51948076, 10.275546, -3.0234678, 4.8817925, 8.142977, 3.9622831, 0.90008205, 5.781966, -0.41162038, 3.3605711, 1.2484554, -5.4810567, 2.4182818, 4.2058067, -2.663686, -4.6050553, -1.669377, -0.16385275, 5.7253647, -1.5142276, 1.210295, -0.29077563, 5.281566, 1.5233121, -0.4782555, -1.3033613, 2.3576853, 8.325342, 0.21288347, -0.783605, 1.5950924, 1.0816135, -0.025689436, 3.6585054, -1.3391883, -0.3836411, 3.877996, -0.52150184, 0.83899003, -0.41181448, 0.5852079, -1.9825158, 2.3358674, 2.075112, 2.4061508, -1.6425287, -0.6081449, -2.4341536, -4.0964117, 0.120078966, 0.18457589, -5.7304587, 5.6307335, 13.611894, -2.012482, 4.2804523, 3.3674395, -7.448337, 8.711407, -6.732925, -2.8412218, -3.7545414, 1.0434946, -2.7012131, 6.256176, -2.3914516, 1.1287585, 2.4196565, -5.2584133, -7.978537, -1.4468716, 0.95562905, 1.3837875, -2.320024, -1.6382118, -4.099346, 2.255768, 1.2519119, -0.49008447, -7.5995274, 3.5457268, 9.778652, 2.2606137, 3.8290167, -0.9418784, 4.212978, 2.9818041, 1.659264, -2.5614574, 8.27517, -2.8600671, -7.9259562, 1.3594017, 1.6567105, -1.3403587, 0.3280927, 8.670691, 0.28534093, 2.292249, -2.282676, 4.4690986, -2.1414974, -0.60606307, -5.3390856, 1.5040756, 0.39028293, -2.598637, -1.1258333, 1.7492628, -3.2837815, 1.5424538, 7.257013, 7.088891, -2.578463, -3.5508192, -0.49091396, -6.4962273, -1.1007748, -1.3489106, 5.9526777, -0.5656548, -0.36412606, -5.2159405, -7.0876694, 2.6046703, -0.6443019, -1.4001197, -0.8438895, 5.5259414, -0.32879078, -1.3705845, 2.2959094, -8.068003, -4.962624, 5.178892, 1.9701464, -1.8909439, 6.2191987, -2.2959473, -6.8804736, 1.3466558, -1.7743236, -3.2780101, -1.7684538, 1.7397734, 2.4385943, 0.98783946, -2.1797302, -10.651695, -4.4063673, -4.4207883, -4.530377, -2.0583167, -4.8602934, -7.858689, 7.8751497, 1.3909745, 0.76662976, -1.6252977, 7.7754054, 1.9406853, 2.2195494, -1.6675531, 4.048896, 1.0666739, 0.26391727, -0.986007, 4.8979664, 0.78216946, -3.603435, -4.305589, 1.3151846, 0.34340596, 3.863035, -1.8924093, 0.83517385, -1.400086, -2.0379934, -0.7723113, -0.3986446, -0.31223804, -1.0415595, -1.6422403, -2.0578163, -3.443859, -2.7350569, -1.2537844, -2.3850648, -1.0555251, -0.20681652, -1.2561231, 0.3993106, -0.45841944, 0.32587564, -0.018395826, 0.2877882, 0.6517481, 0.78506213, 1.1392981, -0.19399215, -2.7287354, -0.20914301, 3.4027827, -2.9949942, 3.2456915, 0.6950064, 4.9096804, 0.53275275, 1.7576772, 0.80712205, 2.0964448, 0.43885633, 0.9102057, 1.9792535, 0.7847213, 0.4982344, 1.2860386, -1.0814108, 1.41623, 2.5466816, 1.2922273, 1.7449489, 0.74610984, -1.096032, 0.3632113, 0.10527998, 0.6628712, -1.2828387, -2.4164293, 1.385574, 0.4545121, -0.045716595, -0.6882027, 0.6892677, 0.5960422, -3.4067109, 0.5444682, 0.7309008, 0.15317108, 0.49010164, 0.062171366, 0.1754561, -0.19333598, 0.38463667, 0.26840112, 0.19108222, 0.018748928, -0.07981029, 2.2576928, -0.75747633, 0.84412134, 2.25342, 0.8131723, -0.97360456, 1.0089644, -2.2891138, 1.3266088, 0.35324484, 0.57757515, -2.8060203, -3.7469501, 1.420995, 1.2395881, 0.011059932, 0.29360402, 3.9948237, 0.14944361, 2.2660074, 0.08021384, -3.1934574, -0.043956045, -0.26969436, 1.9868788, 3.4166656, 0.82423896, -3.2814753, -4.0971155, 1.9713955, 2.6538808, -0.44146648, -4.325582, -7.48722, 3.0081472, -2.8285444, 3.142825, 0.74072653, 3.1914866, -0.38231206, 0.22684534, 0.31675175, -0.0707161, -3.439869, -6.688592, -0.5847772, -0.050503623, 0.36721602, -0.1630344, 3.8832269, -1.324449, 1.3614309, -1.1020445, -0.2060271, -1.4510357, 0.5731673, 3.6629593, 4.028556, 2.1694276, 0.96920496, 1.2611184, 3.1613111, 4.9406548, 0.23301044, 0.44573066, -0.46771288, 3.4555604, 1.5779084, 3.4062665, 1.1427171, 3.7561538, 0.6383803, 0.29851925, 0.24766119, -0.058530174, -0.29882094, -2.913012, 0.120221764, 0.4886301, -0.6431364, -3.746105, -1.8790101, 0.6946376, -6.1305494, 1.0449519, 0.3314104, 1.4438583, 0.9311958, -1.6579773, -0.7170379, -1.6093271, -0.26007757, -0.21209216, -1.0922309, -0.9233062, -1.2338064, 2.204292, -3.9946706, -0.93330914, 2.3998077, -0.67780787, -0.73611015, -0.54448324, -2.2805226, -0.35276616, 0.37251344, -0.84163684, -0.84587187, -0.50507724, -0.07020443, 0.6598194, -0.15459639, -0.6885757, -2.2842538, 0.021989776, 0.123172276, -0.09650105, -0.9379135, -0.12985796, -2.8696806, 0.7617751, 0.8308024, 0.55760646, -0.9980278, -1.1673418, -0.0067449785, 0.17695749, -2.966485, 0.7490187, -3.3341987, -0.33130902, -0.29220635, -0.551877, -0.3279135, -0.64143133, -0.14038916, -0.28563893, 1.0260437, 0.11002408, -2.386728, -1.9959064, 1.2688342, 1.3651959, -1.1420976, -2.6634707, 0.72948444, 2.8650138, -4.0864105, 3.3149579, -0.32045528, 4.1733084, 0.7421933, -0.25383314, -0.7549633, -0.33427924, -0.14248256, -0.64712596, -0.8678498, -0.70439655, 0.4477392, 2.4548376, 3.0055819, -0.7833465, 2.8757887, -0.81246084, -0.3767131, -0.5271218, 1.6765885, -0.6327812, -0.3224291, -0.19326942, -0.74792624, -0.5499884, -0.06982832, -0.5419972, -0.6791194, -2.5797799, -0.9145328, -0.14344403, -5.285304, -0.07418907, -0.23814148, -0.2949077, -1.5994251, -0.6141877, -0.23507778, -0.18198052, -0.3230282, -0.14508626, -0.51338404, -0.6320627, -0.01212337, -0.032982524, 0.18801141, -0.63735396, 0.5829056, -0.6488046, -0.10622433, -0.68182176, -0.006900224, -0.96384335, -1.0247666, -0.24279185, -1.682398, -2.3333259, -0.8610858, -0.47722757, -1.3224282, -1.2172028, -3.7873278, -0.5698952, -3.4994156, -0.9339641, -2.8544629, -0.5432352, -2.0917995, -0.51574117]
#nn = re(ps)
#npod = NNIAP(nn, pod)

# Learn
println("Learning energies...")


opt = Adam(1f-1)
n_epochs = 100
log_step = 10
batch_size = 4
w_e, w_f = 1.0, 0.0
learn!(npod,
       ds_train,
       opt,
       n_epochs,
       energy_loss,
       w_e,
       w_f,
       batch_size,
       log_step
)

opt = Adam(1f-4)
n_epochs = 500
log_step = 10
batch_size = 4
w_e, w_f = 1.0, 0.0
learn!(npod,
       ds_train,
       opt,
       n_epochs,
       energy_loss,
       w_e,
       w_f,
       batch_size,
       log_step
)


#opt = BFGS()
#n_epochs = 50
#w_e, w_f = 1.0, 0.0
#learn!(npod,
#       ds_train,
#       opt,
#       n_epochs,
#       energy_loss,
#       w_e,
#       w_f
#)

@save_var path Flux.params(npod.nn)
ps, re = Flux.destructure(npod.nn)
@save_var path ps


# Post-process output: calculate metrics, create plots, and save results #######

# Update test dataset by adding energy descriptors
println("Computing energy descriptors of test dataset...")
descr_path = "../../../POD/get_descriptors/test/"
e_descr_test = compute_local_descriptors(conf_test,
                                         pod,
                                         T = Float32,
                                         path = descr_path)
GC.gc()
ds_test = DataSet(conf_test .+ e_descr_test)

# Dimension reduction of energy descriptors of test dataset
if reduce_descriptors
    transform!(ds_test, pca)
end

# Get true and predicted values
e_train, e_train_pred = get_all_energies(ds_train),
                        get_all_energies(ds_train, npod)
@save_var path e_train
@save_var path e_train_pred

e_test, e_test_pred = get_all_energies(ds_test),
                      get_all_energies(ds_test, npod)
@save_var path e_test
@save_var path e_test_pred

# Compute metrics
e_train_metrics = get_metrics(e_train_pred, e_train,
                              metrics = [mae, rmse, rsq],
                              label = "e_train")
@save_dict path e_train_metrics

e_test_metrics = get_metrics(e_test_pred, e_test,
                             metrics = [mae, rmse, rsq],
                             label = "e_test")
@save_dict path e_test_metrics

# Plot and save results
e_train_plot = plot_energy(e_train_pred, e_train)
@save_fig path e_train_plot

e_test_plot = plot_energy(e_test_pred, e_test)
@save_fig path e_test_plot

e_plot = plot_energy([e_train_pred; e_test_pred],
                     [e_train; e_test])
@save_fig path e_plot
