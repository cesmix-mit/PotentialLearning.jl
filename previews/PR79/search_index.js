var documenterSearchIndex = {"docs":
[{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"EditURL = \"../../../../examples/ACE-aHfO2/fit-ace-ahfo2.jl\"","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/#Fit-a-HfO2-dataset-with-ACE","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"","category":"section"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/#a.-Load-packages,-define-paths,-and-create-experiment-folder.","page":"Fit a-HfO2 dataset with ACE","title":"a. Load packages, define paths, and create experiment folder.","text":"","category":"section"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Load packages.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"using AtomsBase, InteratomicPotentials, PotentialLearning\nusing Unitful, UnitfulAtomic\nusing LinearAlgebra, Random, DisplayAs","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Define paths.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"path = joinpath(dirname(pathof(PotentialLearning)), \"../examples/ACE-aHfO2\")\nds_path =  \"$path/../data/a-HfO2/a-HfO2-300K-NVT-6000.extxyz\"\nres_path = \"$path/results/\";\nnothing #hide","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Load utility functions.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"include(\"$path/../utils/utils.jl\")","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Create experiment folder.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"run(`mkdir -p $res_path`);\nnothing #hide","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/#b.-Load-atomistic-dataset-and-split-it-into-training-and-test.","page":"Fit a-HfO2 dataset with ACE","title":"b. Load atomistic dataset and split it into training and test.","text":"","category":"section"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Load atomistic dataset: atomistic configurations (atom positions, geometry, etc.) + DFT data (energies, forces, etc.)","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"ds = load_data(ds_path, uparse(\"eV\"), uparse(\"Å\"))[1:1000] # Only the first 1K samples are used in this example.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Split atomistic dataset into training and test","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"n_train, n_test = 50, 50 # Only 50 samples per dataset are used in this example.\nconf_train, conf_test = split(ds, n_train, n_test)","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/#c.-Create-ACE-basis,-compute-descriptors-and-add-them-to-the-dataset.","page":"Fit a-HfO2 dataset with ACE","title":"c. Create ACE basis, compute descriptors and add them to the dataset.","text":"","category":"section"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Create ACE basis","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"basis = ACE(species           = [:Hf, :O],\n            body_order        = 3,\n            polynomial_degree = 4,\n            rcutoff           = 5.0,\n            wL                = 1.0,\n            csp               = 1.0,\n            r0                = 1.0)\n@save_var res_path basis;\nnothing #hide","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Compute ACE descriptors for energy and forces based on the atomistic training configurations.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"println(\"Computing energy descriptors of training dataset...\")\ne_descr_train = compute_local_descriptors(conf_train, basis;\n                                          pbar=false)\nprintln(\"Computing force descriptors of training dataset...\")\nf_descr_train = compute_force_descriptors(conf_train, basis;\n                                          pbar=false)","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Update training dataset by adding energy and force descriptors.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"ds_train = DataSet(conf_train .+ e_descr_train .+ f_descr_train)","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/#d.-Learn-ACE-coefficients-based-on-ACE-descriptors-and-DFT-data.","page":"Fit a-HfO2 dataset with ACE","title":"d. Learn ACE coefficients based on ACE descriptors and DFT data.","text":"","category":"section"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"println(\"Learning energies and forces...\")\nlb = LBasisPotential(basis)\nws, int = [1.0, 1.0], false\nlearn!(lb, ds_train, ws, int)\n@save_var res_path lb.β\n@save_var res_path lb.β0\nlb.β, lb.β0","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/#e.-Post-process-output:-calculate-metrics,-create-plots,-and-save-results.","page":"Fit a-HfO2 dataset with ACE","title":"e. Post-process output: calculate metrics, create plots, and save results.","text":"","category":"section"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Compute ACE descriptors for energy and forces based on the atomistic test configurations.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"println(\"Computing energy descriptors of test dataset...\")\ne_descr_test = compute_local_descriptors(conf_test, basis;\n                                         pbar = false)\nprintln(\"Computing force descriptors of test dataset...\")\nf_descr_test = compute_force_descriptors(conf_test, basis;\n                                         pbar = false);\nnothing #hide","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Update test dataset by adding energy and force descriptors.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"ds_test = DataSet(conf_test .+ e_descr_test .+ f_descr_test)","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Get true and predicted values for energies and forces.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"n_atoms_train = length.(get_system.(ds_train))\nn_atoms_test = length.(get_system.(ds_test))\n\ne_train, e_train_pred = get_all_energies(ds_train) ./ n_atoms_train,\n                        get_all_energies(ds_train, lb) ./ n_atoms_train\nf_train, f_train_pred = get_all_forces(ds_train),\n                        get_all_forces(ds_train, lb)\n@save_var res_path e_train\n@save_var res_path e_train_pred\n@save_var res_path f_train\n@save_var res_path f_train_pred\n\ne_test, e_test_pred = get_all_energies(ds_test) ./ n_atoms_test,\n                      get_all_energies(ds_test, lb) ./ n_atoms_test\nf_test, f_test_pred = get_all_forces(ds_test),\n                      get_all_forces(ds_test, lb)\n@save_var res_path e_test\n@save_var res_path e_test_pred\n@save_var res_path f_test\n@save_var res_path f_test_pred;\nnothing #hide","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Compute training metrics.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"e_train_metrics = get_metrics(e_train, e_train_pred,\n                              metrics = [mae, rmse, rsq],\n                              label = \"e_train\")\nf_train_metrics = get_metrics(f_train, f_train_pred,\n                              metrics = [mae, rmse, rsq, mean_cos],\n                              label = \"f_train\")\ntrain_metrics = merge(e_train_metrics, f_train_metrics)\n@save_dict res_path train_metrics\ntrain_metrics","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Compute test metrics.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"e_test_metrics = get_metrics(e_test, e_test_pred,\n                             metrics = [mae, rmse, rsq],\n                             label = \"e_test\")\nf_test_metrics = get_metrics(f_test, f_test_pred,\n                             metrics = [mae, rmse, rsq, mean_cos],\n                             label = \"f_test\")\ntest_metrics = merge(e_test_metrics, f_test_metrics)\n@save_dict res_path test_metrics\ntest_metrics","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Plot and save energy results.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"e_plot = plot_energy(e_train, e_train_pred,\n                     e_test, e_test_pred)\n@save_fig res_path e_plot\nDisplayAs.PNG(e_plot)","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Plot and save force results.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"f_plot = plot_forces(f_train, f_train_pred,\n                     f_test, f_test_pred)\n@save_fig res_path f_plot\nDisplayAs.PNG(f_plot)","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Plot and save training force cosine.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"e_train_plot = plot_energy(e_train, e_train_pred)\nf_train_plot = plot_forces(f_train, f_train_pred)\nf_train_cos  = plot_cos(f_train, f_train_pred)\n@save_fig res_path e_train_plot\n@save_fig res_path f_train_plot\n@save_fig res_path f_train_cos\nDisplayAs.PNG(f_train_cos)","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"Plot and save test force cosine.","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"e_test_plot = plot_energy(e_test, e_test_pred)\nf_test_plot = plot_forces(f_test, f_test_pred)\nf_test_cos  = plot_cos(f_test, f_test_pred)\n@save_fig res_path e_test_plot\n@save_fig res_path f_test_plot\n@save_fig res_path f_test_cos\nDisplayAs.PNG(f_test_cos)","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"","category":"page"},{"location":"generated/ACE-aHfO2/fit-ace-ahfo2/","page":"Fit a-HfO2 dataset with ACE","title":"Fit a-HfO2 dataset with ACE","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"EditURL = \"../../../../examples/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2.jl\"","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/#Subsample-a-HfO2-dataset-and-fit-with-ACE","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset and fit with ACE","text":"","category":"section"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/#a.-Load-packages,-define-paths,-and-create-experiment-folder.","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"a. Load packages, define paths, and create experiment folder.","text":"","category":"section"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Load packages.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"using AtomsBase, InteratomicPotentials, PotentialLearning\nusing Unitful, UnitfulAtomic\nusing LinearAlgebra, Random, DisplayAs","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Define paths.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"path = joinpath(dirname(pathof(PotentialLearning)), \"../examples/DPP-ACE-aHfO2-1\")\nds_path =  \"$path/../data/a-HfO2/a-HfO2-300K-NVT-6000.extxyz\"\nres_path = \"$path/results/\";\nnothing #hide","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Load utility functions.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"include(\"$path/../utils/utils.jl\")","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Create experiment folder.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"run(`mkdir -p $res_path`);\nnothing #hide","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/#b.-Load-atomistic-dataset-and-split-it-into-training-and-test.","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"b. Load atomistic dataset and split it into training and test.","text":"","category":"section"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Load atomistic dataset: atomistic configurations (atom positions, geometry, etc.) + DFT data (energies, forces, etc.)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"ds = load_data(ds_path, uparse(\"eV\"), uparse(\"Å\"))","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Split atomistic dataset into training and test","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"n_train, n_test = 100, 50 # Few samples per dataset are used in this example.\nconf_train, conf_test = split(ds[1:1000], n_train, n_test)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/#c.-Subsampling","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"c. Subsampling","text":"","category":"section"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Compute ACE descriptors for energies as subsampling input.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"basis = ACE(species           = [:Hf, :O],\n            body_order        = 2,\n            polynomial_degree = 3,\n            rcutoff           = 5.0,\n            wL                = 1.0,\n            csp               = 1.0,\n            r0                = 1.0)\ne_descr = compute_local_descriptors(conf_train,\n                                    basis,\n                                    pbar = false)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Update subsampling dataset","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"conf_train_kDPP = DataSet(conf_train .+ e_descr)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Create DPP subselector","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"dataset_selector = kDPP(  conf_train_kDPP,\n                          GlobalMean(),\n                          DotProduct();\n                          batch_size = 50)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Subsample trainig dataset","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"inds = get_random_subset(dataset_selector)\nconf_train = @views conf_train[inds]","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/#d.-Create-ACE-basis,-compute-descriptors-and-add-them-to-the-dataset.","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"d. Create ACE basis, compute descriptors and add them to the dataset.","text":"","category":"section"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Create ACE basis","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"basis = ACE(species           = [:Hf, :O],\n            body_order        = 3,\n            polynomial_degree = 4,\n            rcutoff           = 5.0,\n            wL                = 1.0,\n            csp               = 1.0,\n            r0                = 1.0)\n@save_var res_path basis;\nnothing #hide","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Compute ACE descriptors for energy and forces based on the atomistic training configurations.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"println(\"Computing energy descriptors of training dataset...\")\ne_descr_train = compute_local_descriptors(conf_train, basis;\n                                          pbar=false)\nprintln(\"Computing force descriptors of training dataset...\")\nf_descr_train = compute_force_descriptors(conf_train, basis;\n                                          pbar=false)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Update training dataset by adding energy and force descriptors.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"ds_train = DataSet(conf_train .+ e_descr_train .+ f_descr_train)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/#e.-Learn-ACE-coefficients-based-on-ACE-descriptors-and-DFT-data.","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"e. Learn ACE coefficients based on ACE descriptors and DFT data.","text":"","category":"section"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"println(\"Learning energies and forces...\")\nlb = LBasisPotential(basis)\nws, int = [1.0, 1.0], false\nlearn!(lb, ds_train, ws, int)\n@save_var res_path lb.β\n@save_var res_path lb.β0\nlb.β, lb.β0","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/#f.-Post-process-output:-calculate-metrics,-create-plots,-and-save-results.","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"f. Post-process output: calculate metrics, create plots, and save results.","text":"","category":"section"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Compute ACE descriptors for energy and forces based on the atomistic test configurations.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"println(\"Computing energy descriptors of test dataset...\")\ne_descr_test = compute_local_descriptors(conf_test, basis;\n                                         pbar = false)\nprintln(\"Computing force descriptors of test dataset...\")\nf_descr_test = compute_force_descriptors(conf_test, basis;\n                                         pbar = false);\nnothing #hide","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Update test dataset by adding energy and force descriptors.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"ds_test = DataSet(conf_test .+ e_descr_test .+ f_descr_test)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Get true and predicted values for energies and forces.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"n_atoms_train = length.(get_system.(ds_train))\nn_atoms_test = length.(get_system.(ds_test))\n\ne_train, e_train_pred = get_all_energies(ds_train) ./ n_atoms_train,\n                        get_all_energies(ds_train, lb) ./ n_atoms_train\nf_train, f_train_pred = get_all_forces(ds_train),\n                        get_all_forces(ds_train, lb)\n@save_var res_path e_train\n@save_var res_path e_train_pred\n@save_var res_path f_train\n@save_var res_path f_train_pred\n\ne_test, e_test_pred = get_all_energies(ds_test) ./ n_atoms_test,\n                      get_all_energies(ds_test, lb) ./ n_atoms_test\nf_test, f_test_pred = get_all_forces(ds_test),\n                      get_all_forces(ds_test, lb)\n@save_var res_path e_test\n@save_var res_path e_test_pred\n@save_var res_path f_test\n@save_var res_path f_test_pred;\nnothing #hide","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Compute training metrics.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"e_train_metrics = get_metrics(e_train, e_train_pred,\n                              metrics = [mae, rmse, rsq],\n                              label = \"e_train\")\nf_train_metrics = get_metrics(f_train, f_train_pred,\n                              metrics = [mae, rmse, rsq, mean_cos],\n                              label = \"f_train\")\ntrain_metrics = merge(e_train_metrics, f_train_metrics)\n@save_dict res_path train_metrics\ntrain_metrics","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Compute test metrics.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"e_test_metrics = get_metrics(e_test, e_test_pred,\n                             metrics = [mae, rmse, rsq],\n                             label = \"e_test\")\nf_test_metrics = get_metrics(f_test, f_test_pred,\n                             metrics = [mae, rmse, rsq, mean_cos],\n                             label = \"f_test\")\ntest_metrics = merge(e_test_metrics, f_test_metrics)\n@save_dict res_path test_metrics\ntest_metrics","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Plot and save energy results.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"e_plot = plot_energy(e_train, e_train_pred,\n                     e_test, e_test_pred)\n@save_fig res_path e_plot\nDisplayAs.PNG(e_plot)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Plot and save force results.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"f_plot = plot_forces(f_train, f_train_pred,\n                     f_test, f_test_pred)\n@save_fig res_path f_plot\nDisplayAs.PNG(f_plot)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Plot and save training force cosine.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"e_train_plot = plot_energy(e_train, e_train_pred)\nf_train_plot = plot_forces(f_train, f_train_pred)\nf_train_cos  = plot_cos(f_train, f_train_pred)\n@save_fig res_path e_train_plot\n@save_fig res_path f_train_plot\n@save_fig res_path f_train_cos\nDisplayAs.PNG(f_train_cos)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"Plot and save test force cosine.","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"e_test_plot = plot_energy(e_test, e_test_pred)\nf_test_plot = plot_forces(f_test, f_test_pred)\nf_test_cos  = plot_cos(f_test, f_test_pred)\n@save_fig res_path e_test_plot\n@save_fig res_path f_test_plot\n@save_fig res_path f_test_cos\nDisplayAs.PNG(f_test_cos)","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"","category":"page"},{"location":"generated/DPP-ACE-aHfO2-1/fit-dpp-ace-ahfo2/","page":"Subsample a-HfO2 dataset with DPP and fit with ACE","title":"Subsample a-HfO2 dataset with DPP and fit with ACE","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"This page provides a list of all documented types and functions and in PotentialLearning.jl.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [PotentialLearning]\nOrder   = [:type, :function, :constant]","category":"page"},{"location":"api/#PotentialLearning.ActiveSubspace","page":"API","title":"PotentialLearning.ActiveSubspace","text":"ActiveSubspace{T<:Real} <: DimensionReducer\n    Q :: Function \n    ∇Q :: Function (gradient of Q)\n    tol :: T\n\nUse the theory of active subspaces, with a given quantity of interest (expressed as the function Q) which takes a Configuration as an input and outputs a real scalar. ∇Q should input a Configuration and output an appropriate gradient.  If tol is a float then the number of components to keep is determined by the smallest n such that relative percentage of variance explained by keeping the leading n principle components is greater than 1 - tol. If tol is an int, then we return the components corresponding to the tol largest eigenvalues.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.AtomicData","page":"API","title":"PotentialLearning.AtomicData","text":"AtomicData <: Data\n\nAbstract type declaring the type of information that is unique to a particular atom (instead of a whole configuration).\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.Configuration-Tuple{Vararg{Union{ConfigurationData, AtomsBase.FlexibleSystem}}}","page":"API","title":"PotentialLearning.Configuration","text":"Configuration(data::Union{AtomsBase.FlexibleSystem, ConfigurationData} )\n\nA Configuration is a data struct that contains information unique to a particular configuration of atoms (Energy, LocalDescriptors, ForceDescriptors, and a FlexibleSystem) in a dictionary.      Example:     '''julia         e = Energy(-0.57, u\"eV\")         ld = LocalDescriptors(...)         c = Configuration(e, ld)     '''\n\nConfigurations can be added together, which merges the data dictionaries      '''julia      c1 = Configuration(e) # Contains energy      c2 = Configuration(f) # contains forces      c = c1 + c2 # c <: Configuration, contains energy and forces     '''\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.ConfigurationData","page":"API","title":"PotentialLearning.ConfigurationData","text":"ConfigurationData <: Data\n\nAbstract type declaring the type of data that is unique to a particular configuration (instead of just an atom).\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.CorrelationMatrix","page":"API","title":"PotentialLearning.CorrelationMatrix","text":"CorrelationMatrix \n    α :: Vector{Float64} # weights\n\nCorrelationMatrix produces a global descriptor that is the correlation matrix of the local descriptors. In other words, it is mean(bi'*bi for bi in B). \n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.CovariateLinearProblem","page":"API","title":"PotentialLearning.CovariateLinearProblem","text":"struct CovariateLinearProblem{T<:Real} <: LinearProblem{T}     e::Vector     f::Vector{Vector{T}}     B::Vector{Vector{T}}     dB::Vector{Matrix{T}}     β::Vector{T}     β0::Vector{T}     σe::Vector{T}     σf::Vector{T}     Σ::Symmetric{T,Matrix{T}} end\n\nA CovariateLinearProblem is a linear problem in which we are fitting energies and forces using both descriptors and their gradients (B and dB, respectively). When this is the case, the solution is not available analytically and must be solved using some iterative optimization proceedure. In the end, we fit the model coefficients, β, standard deviations corresponding to energies and forces, σe and σf, and the covariance Σ. \n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.DBSCANSelector","page":"API","title":"PotentialLearning.DBSCANSelector","text":"struct DBSCANSelector <: SubsetSelector\n    clusters\n    eps\n    minpts\n    sample_size\nend\n\nDefinition of the type DBSCANSelector, a subselector based on the clustering method DBSCAN.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.DBSCANSelector-Tuple{DataSet, Any, Any, Any}","page":"API","title":"PotentialLearning.DBSCANSelector","text":"function DBSCANSelector(\n    ds::DataSet,\n    eps,\n    minpts,\n    sample_size\n)\n\nConstructor of DBSCANSelector based on the atomic configurations in ds, the DBSCAN params eps and minpts, and the sample size sample_size.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.Data","page":"API","title":"PotentialLearning.Data","text":"Data\n\nAbstract supertype of ConfigurationData.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.DataBase","page":"API","title":"PotentialLearning.DataBase","text":"DataBase\n\nAbstract type for DataSets. \n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.DataSet","page":"API","title":"PotentialLearning.DataSet","text":"DataSet\n\nStruct that holds vector of configuration. Most operations in PotentialLearning are built around the DataSet structure.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.Distance","page":"API","title":"PotentialLearning.Distance","text":"Distance\n\nA struct of abstract type Distance produces the distance between two `global` descriptors, or features. Not all distances might be compatible with all types of features.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.Divergence","page":"API","title":"PotentialLearning.Divergence","text":"Divergence\n\nA struct of abstract type Divergence produces a measure of discrepancy between two probability distributions. Discepancies may take as argument analytical distributions or sets of samples representing empirical distributions.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.DotProduct","page":"API","title":"PotentialLearning.DotProduct","text":"DotProduct <: Kernel \n    α :: Power of DotProduct kernel \n\n\nComputes the dot product kernel between two features, i.e.,\n\ncos(θ) = ( A ⋅ B / (||A||^2||B||^2) )^α\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.Energy","page":"API","title":"PotentialLearning.Energy","text":"Energy <: ConfigurationData\n    d :: Real\n    u :: Unitful.FreeUnits\n\nConvenience struct that holds energy information (and corresponding units). Default unit is eV\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.Euclidean","page":"API","title":"PotentialLearning.Euclidean","text":"Euclidean <: Distance \n    Cinv :: Covariance Matrix \n\nComputes the squared euclidean distance with weight matrix Cinv, the inverse of some covariance matrix.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.ExtXYZ","page":"API","title":"PotentialLearning.ExtXYZ","text":"ExtXYZ <: IO\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.Feature","page":"API","title":"PotentialLearning.Feature","text":"Feature\n\nA struct of abstract type Feature represents a function that takes in a set of local descriptors corresponding to some atomic environment and produce a global descriptor. \n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.Force","page":"API","title":"PotentialLearning.Force","text":"Force <: AtomicData \n    f :: Vector{<:Real}\n    u :: Unitful.FreeUnits\n\nContains the force with (x,y,z)-components in f with units u. Default unit is \"eV/Å\". \n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.ForceDescriptor","page":"API","title":"PotentialLearning.ForceDescriptor","text":"ForceDescriptor <: AtomicData\n    b :: Vector{<:Vector{<:Real}}\n\nContains the x,y,z components (out vector) of the force descriptor (inner vector).\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.ForceDescriptors","page":"API","title":"PotentialLearning.ForceDescriptors","text":"ForceDescriptors <: ConfigurationData\n    b :: Vector{ForceDescriptor}\n\nA container holding all of the ForceDescriptors for all atoms in a configuration.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.Forces","page":"API","title":"PotentialLearning.Forces","text":"Forces <: ConfigurationData\n    f :: Vector{force}\n\nForces is a struct that contains all force information in a configuration.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.Forstner","page":"API","title":"PotentialLearning.Forstner","text":"Forstner <: Distance \n    α :: Regularization parameter\n\nComputes the squared Forstner distance between two positive semi-definite matrices.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.GlobalMean","page":"API","title":"PotentialLearning.GlobalMean","text":"    GlobalMean{T}\n\nGlobalMean produces the mean of the local descriptors.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.GlobalSum","page":"API","title":"PotentialLearning.GlobalSum","text":"    GlobalSum{T}\n\nGlobalSum produces the sum of the local descriptors.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.InverseMultiquadric","page":"API","title":"PotentialLearning.InverseMultiquadric","text":"InverseMultiquadric <: Kernel \n    d :: Distance function \n    c2 :: Squared constant parameter\n    ℓ :: Length-scale parameter\n\nComputes the inverse multiquadric (IMQ) kernel, i.e.,\n\n k(A, B) = (c^2 + d(A,B)/β^2)^{-1/2}\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.Kernel","page":"API","title":"PotentialLearning.Kernel","text":"Kernel\n\nA struct of abstract type Kernel is function that takes in two features and produces a semi-definite scalar representing the similarity between the two features.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.KernelSteinDiscrepancy","page":"API","title":"PotentialLearning.KernelSteinDiscrepancy","text":"KernelSteinDiscrepancy <: Divergence\n    score :: Function\n    knl :: Kernel\n\nComputes the kernel Stein discrepancy between distributions p (from which samples are provided) and q (for which the score is provided) based on the RKHS defined by kernel k.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.LAMMPS","page":"API","title":"PotentialLearning.LAMMPS","text":"struct LAMMPS <: IO\n    elements :: Vector{Symbol}\n    boundary_conditions :: Vector\nend\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.LearningProblem","page":"API","title":"PotentialLearning.LearningProblem","text":"struct LearningProblem{T<:Real} <: AbstractLearningProblem     ds::DataSet     logprob::Function     ∇logprob::Function     params::Vector{T} end\n\nGeneric LearningProblem that allows the user to pass a logprob(y::params, ds::DataSet) function and its gradient. The gradient should return a vector of logprob with respect to it's params. If the user does not have a gradient function available, then Flux can provide one for it (provided that logprob is of the form above).\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.LearningProblem-Union{Tuple{T}, Tuple{DataSet, Function, Vector{T}}} where T","page":"API","title":"PotentialLearning.LearningProblem","text":"function LearningProblem(     ds::DataSet,     logprob::Function,     params::Vector{T} ) where {T}\n\nGeneric LearningProblem construnctor.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.LinearProblem","page":"API","title":"PotentialLearning.LinearProblem","text":"abstract type LinearProblem{T<:Real} <: AbstractLearningProblem end\n\nAn abstract type to specify linear potential inference problems. \n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.LinearProblem-Tuple{DataSet}","page":"API","title":"PotentialLearning.LinearProblem","text":"function LinearProblem(     ds::DataSet;     T = Float64 )\n\nConstruct a LinearProblem by detecting if there are energy descriptors and/or force descriptors and construct the appropriate LinearProblem (either Univariate, if only a single type of descriptor, or Covariate, if there are both types).\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.LocalDescriptor","page":"API","title":"PotentialLearning.LocalDescriptor","text":"LocalDescriptor <: AtomicData\n\nA vector corresponding to the descriptor for a particular atom's neighborhood.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.LocalDescriptors","page":"API","title":"PotentialLearning.LocalDescriptors","text":"LocalDescriptors <: ConfigurationData\n\nA vector of LocalDescriptor, which now should represent all local descriptors for atoms in a configuration.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.PCA","page":"API","title":"PotentialLearning.PCA","text":"PCA <: DimensionReducer\n    tol :: Float64\n\nUse SVD to compute the PCA of the design matrix of descriptors. (using Force descriptors TBA)\n\nIf tol is a float then the number of components to keep is determined by the smallest n such that relative percentage of variance explained by keeping the leading n principle components is greater than 1 - tol. If tol is an int, then we return the components corresponding to the tol largest eigenvalues.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.PCAState","page":"API","title":"PotentialLearning.PCAState","text":"PCAState <: DimensionReducer\n    tol :: Float64\n\nUse SVD to compute the PCA of the design matrix of descriptors.\n\nIf tol is a float then the number of components to keep is determined by the smallest n such that relative percentage of variance explained by keeping the leading n principle components is greater than 1 - tol. If tol is an int, then we return the components corresponding to the tol largest eigenvalues.\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.RBF","page":"API","title":"PotentialLearning.RBF","text":"RBF <: Kernel \n    d :: Distance function \n    α :: Regularization parameter \n    ℓ :: Length-scale parameter\n    β :: Scale parameter\n\n\nComputes the squared exponential kernel, i.e.,\n\n k(A, B) = β \u001bxp( -\frac{1}{2} d(A,B)/ℓ^2 ) + α δ(A, B)\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.RandomSelector","page":"API","title":"PotentialLearning.RandomSelector","text":"struct Random\n    num_configs :: Int \n    batch_size  :: Int \nend\n\nA convenience function that allows the user to randomly select indices uniformly over [1, num_configs]. \n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.UnivariateLinearProblem","page":"API","title":"PotentialLearning.UnivariateLinearProblem","text":"struct UnivariateLinearProblem{T<:Real} <: LinearProblem{T}     ivdata::Vector     dvdata::Vector     β::Vector{T}     β0::Vector{T}     σ::Vector{T}     Σ::Symmetric{T,Matrix{T}} end\n\nA UnivariateLinearProblem is a linear problem in which there is only 1 type of independent variable / dependent variable. Typically, that means we are either only fitting energies or only fitting forces. When this is the case, the solution is available analytically and the standard deviation, σ, and covariance, Σ, of the coefficients, β, are computable. \n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.YAML","page":"API","title":"PotentialLearning.YAML","text":"YAML <: IO\n    energy_units :: Unitful.FreeUnits\n    distance_units :: Unitful.FreeUnits\n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.kDPP","page":"API","title":"PotentialLearning.kDPP","text":"struct kDPP\n    K :: EllEnsemble\nend\n\nA convenience function that allows the user access to a k-Determinantal Point Process through Determinantal.jl. All that is required to construct a kDPP is a similarity kernel, for which the user must provide a LinearProblem and two functions to compute descriptor (1) diversity and (2) quality. \n\n\n\n\n\n","category":"type"},{"location":"api/#PotentialLearning.kDPP-Tuple{DataSet, Feature, Kernel}","page":"API","title":"PotentialLearning.kDPP","text":"kDPP(ds::Dataset, f::Feature, k::Kernel)\n\nA convenience function that allows the user access to a k-Determinantal Point Process through Determinantal.jl. All that is required to construct a kDPP is a dataset, a method to compute features, and a kernel. Optional arguments include batch size and type of descriptor (default LocalDescriptors).\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.kDPP-Union{Tuple{T}, Tuple{Union{Array{Vector{T}, 1}, Array{LinearAlgebra.Symmetric{T, Matrix{T}}, 1}}, Kernel}} where T","page":"API","title":"PotentialLearning.kDPP","text":"kDPP(features::Union{Vector{Vector{T}}, Vector{Symmetric{T, Matrix{T}}}}, k::Kernel)\n\nA convenience function that allows the user access to a k-Determinantal Point Process through Determinantaljl. All that is required to construct a kDPP are features (either a vector of vector features or a vector of symmetric matrix features) and a kernel. Optional argument is batch_size (default length(features)).\n\n\n\n\n\n","category":"method"},{"location":"api/#InteratomicPotentials.compute_force_descriptors-Tuple{DataSet, InteratomicPotentials.BasisSystem}","page":"API","title":"InteratomicPotentials.compute_force_descriptors","text":"function computeforcedescriptors(     ds::DataSet,     basis::BasisSystem;     pbar = true )\n\nCompute force descriptors of a basis system and dataset using threads.\n\n\n\n\n\n","category":"method"},{"location":"api/#InteratomicPotentials.compute_local_descriptors-Tuple{DataSet, InteratomicPotentials.BasisSystem}","page":"API","title":"InteratomicPotentials.compute_local_descriptors","text":"function computelocaldescriptors(     ds::DataSet,     basis::BasisSystem;     pbar = true )\n\nds: dataset. basis: basis system (e.g. ACE) pbar: progress bar\n\nCompute local descriptors of a basis system and dataset using threads.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.KernelMatrix-Tuple{DataSet, DataSet, Feature, Kernel}","page":"API","title":"PotentialLearning.KernelMatrix","text":"KernelMatrix(ds1::DataSet, ds2::DataSet, F::Feature, k::Kernel)\n\nCompute nonsymmetric kernel matrix K using features of the datasets ds1 and ds2 calculated using the Feature method F.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.KernelMatrix-Tuple{DataSet, Feature, Kernel}","page":"API","title":"PotentialLearning.KernelMatrix","text":"KernelMatrix(ds::DataSet, F::Feature, k::Kernel)\n\nCompute symmetric kernel matrix K using features of the dataset ds calculated using the Feature method F. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.KernelMatrix-Union{Tuple{T}, Tuple{Union{Array{Vector{T}, 1}, Array{LinearAlgebra.Symmetric{T, Matrix{T}}, 1}}, Kernel}} where T","page":"API","title":"PotentialLearning.KernelMatrix","text":"KernelMatrix(F, k::Kernel)\n\nCompute symmetric kernel matrix K where K{ij} = k(Fi, F_j). \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.KernelMatrix-Union{Tuple{T}, Tuple{Union{Array{Vector{T}, 1}, Array{LinearAlgebra.Symmetric{T, Matrix{T}}, 1}}, Union{Array{Vector{T}, 1}, Array{LinearAlgebra.Symmetric{T, Matrix{T}}, 1}}, Kernel}} where T","page":"API","title":"PotentialLearning.KernelMatrix","text":"KernelMatrix(F1, F2, k::Kernel)\n\nCompute non-symmetric kernel matrix K where K{ij} = k(F1i, F2_j). \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.calc_centroid-Tuple{Matrix{Float64}}","page":"API","title":"PotentialLearning.calc_centroid","text":"function calc_centroid(\n    m::Array{Float64,2}\n)\n\nCalculate a centroid of a matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.calc_metrics-Tuple{Any, Any}","page":"API","title":"PotentialLearning.calc_metrics","text":"calc_metrics(x_pred, x)\n\nx_pred: vector of predicted values of a variable. E.g. energy. x: vector of true values of a variable. E.g. energy.\n\nReturns MAE, RMSE, and RSQ.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.compute_distance-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Euclidean}} where T<:Real","page":"API","title":"PotentialLearning.compute_distance","text":"compute_distance(A, B, d)\n\nCompute the distance between features A and B using distance metric d. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.compute_features-Tuple{DataSet, Feature}","page":"API","title":"PotentialLearning.compute_features","text":"compute_feature(ds::DataSet, f::Feature; dt = LocalDescriptors)\n\nComputes features of the dataset ds using the feature method F on descriptors dt (default option are the LocalDescriptors, if available).\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.compute_gradx_distance-Union{Tuple{T}, Tuple{T, T, Euclidean}} where T<:(Vector{<:Real})","page":"API","title":"PotentialLearning.compute_gradx_distance","text":"compute_gradx_distance(A, B, d)\n\nCompute gradient of the distance between features A and B using distance metric d, with respect to the first argument (A). \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.compute_gradx_kernel-Union{Tuple{T}, Tuple{T, T, RBF}} where T<:(Vector{<:Real})","page":"API","title":"PotentialLearning.compute_gradx_kernel","text":"compute_gradx_kernel(A, B, k)\n\nCompute gradient of the kernel between features A and B using kernel k, with respect to the first argument (A). \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.compute_gradxy_distance-Union{Tuple{T}, Tuple{T, T, Euclidean}} where T<:(Vector{<:Real})","page":"API","title":"PotentialLearning.compute_gradxy_distance","text":"compute_gradxy_distance(A, B, d)\n\nCompute second-order cross derivative of the distance between features A and B using distance metric d. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.compute_gradxy_kernel-Union{Tuple{T}, Tuple{T, T, RBF}} where T<:(Vector{<:Real})","page":"API","title":"PotentialLearning.compute_gradxy_kernel","text":"compute_gradxy_kernel(A, B, k)\n\nCompute the second-order cross derivative of the kernel between features A and B using kernel k. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.compute_grady_distance-Union{Tuple{T}, Tuple{T, T, Euclidean}} where T<:(Vector{<:Real})","page":"API","title":"PotentialLearning.compute_grady_distance","text":"compute_grady_distance(A, B, d)\n\nCompute gradient of the distance between features A and B using distance metric d, with respect to the second argument (B). \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.compute_grady_kernel-Union{Tuple{T}, Tuple{T, T, RBF}} where T<:(Vector{<:Real})","page":"API","title":"PotentialLearning.compute_grady_kernel","text":"compute_grady_kernel(A, B, k)\n\nCompute gradient of the kernel between features A and B using kernel k, with respect to the second argument (B). \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.compute_kernel-Union{Tuple{T}, Tuple{T, T, RBF}} where T<:Union{LinearAlgebra.Symmetric{<:Real, <:Matrix{<:Real}}, Vector{<:Real}}","page":"API","title":"PotentialLearning.compute_kernel","text":"compute_kernel(A, B, k)\n\nCompute similarity kernel between features A and B using kernel k. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.distance_matrix_kabsch-Tuple{DataSet}","page":"API","title":"PotentialLearning.distance_matrix_kabsch","text":"function distance_matrix_kabsch(\n    ds::DataSet\n)\n\nCalculate a matrix of distances between atomic configurations using KABSCH method.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.distance_matrix_periodic-Tuple{DataSet}","page":"API","title":"PotentialLearning.distance_matrix_periodic","text":"function distance_matrix_periodic(\n    ds::DataSet\n)\n\nCalculates a matrix of distances between atomic configurations taking into account the periodic boundaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.fit","page":"API","title":"PotentialLearning.fit","text":"fit(ds::DataSet, dr::DimensionReducer)\n\nFits a linear dimension reduction routine using information from DataSet. See individual types of DimensionReducers for specific details.\n\n\n\n\n\n","category":"function"},{"location":"api/#PotentialLearning.fit-Tuple{DataSet, ActiveSubspace}","page":"API","title":"PotentialLearning.fit","text":"fit(ds::DataSet, as::ActiveSubspace)\n\nFits a linear dimension reduction routine using the eigendirections of the uncentered covariance of the function ∇Q(c::Configuration) over the configurations in ds. Primarily used to reduce the dimension of the descriptors.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.fit-Tuple{DataSet, PCA}","page":"API","title":"PotentialLearning.fit","text":"fit(ds::DataSet, pca::PCA)\n\nFits a linear dimension reduction routine using PCA on the global descriptors in the dataset ds. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.fit_transform-Tuple{DataSet, DimensionReducer}","page":"API","title":"PotentialLearning.fit_transform","text":"fit_transform(ds::DataSet, dr::DimensionReducer)\n\nFits a linear dimension reduction routine using information from DataSet and performs dimension reduction on descriptors and force_descriptors (whichever are available). See individual types of DimensionReducers for specific details.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.force-Tuple{Configuration, InteratomicPotentials.BasisPotential}","page":"API","title":"PotentialLearning.force","text":"function force(     c::Configuration,     bp::BasisPotential )\n\nc: atomic configuration. bp: basis potential.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.force-Tuple{Configuration, InteratomicPotentials.NNBasisPotential}","page":"API","title":"PotentialLearning.force","text":"function force(     c::Configuration,     nnbp::NNBasisPotential )\n\nc: atomic configuration. nnbp: neural network basis potential.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_all_energies-Tuple{DataSet, InteratomicPotentials.BasisPotential}","page":"API","title":"PotentialLearning.get_all_energies","text":"function get_all_energies(\n    ds::DataSet,\n    bp::BasisPotential\n)\n\nds: dataset. bp: basis potential.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_all_energies-Tuple{DataSet}","page":"API","title":"PotentialLearning.get_all_energies","text":"function getallenergies(     ds::DataSet )\n\nds: dataset.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_all_forces-Tuple{DataSet, InteratomicPotentials.BasisPotential}","page":"API","title":"PotentialLearning.get_all_forces","text":"function getallforces(     ds::DataSet,     bp::BasisPotential )\n\nds: dataset. bp: basis potential.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_all_forces-Tuple{DataSet}","page":"API","title":"PotentialLearning.get_all_forces","text":"function get_all_forces(\n    ds::DataSet\n)\n\nds: dataset.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_batches-NTuple{11, Any}","page":"API","title":"PotentialLearning.get_batches","text":"get_batches(n_batches, B_train, B_train_ext, e_train, dB_train, f_train,\n            B_test, B_test_ext, e_test, dB_test, f_test)\n\nn_batches: no. of batches per dataset. B_train: descriptors of the energies used in training. B_train_ext: extendended descriptors of the energies used in training. Requiered to compute forces. e_train: energies used in training. dB_train: derivatives of the energy descritors used in training. f_train: forces used in training. B_test: descriptors of the energies used in test. B_test_ext: extendended descriptors of the energies used in test. Requiered to compute forces. e_test: energies used in test. dB_test: derivatives of the energy descritors used in test. f_test: forces used in test.\n\nReturns the data loaders for training and test of energies and forces.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_clusters-Tuple{Any, Any, Any}","page":"API","title":"PotentialLearning.get_clusters","text":"function get_clusters(\n    ds,\n    eps,\n    minpts\n)\n\nComputes clusters from the configurations in ds using DBSCAN with parameters eps and minpts.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_dpp_mode-Tuple{kDPP}","page":"API","title":"PotentialLearning.get_dpp_mode","text":"get_dpp_mode(dpp::kDPP, batch_size::Int) <: Vector{Int64}\n\nAccess an approximate mode of the k-DPP as calculated by a greedy subset algorithm. See Determinantal.jl for details.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_energy-Tuple{Configuration}","page":"API","title":"PotentialLearning.get_energy","text":"get_energy(c::Configuration) <: Energy\n\nRetrieves the energy (if available) in the Configuration c. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_force_descriptors-Tuple{Configuration}","page":"API","title":"PotentialLearning.get_force_descriptors","text":"get_force_descriptors(c::Configuration) <: ForceDescriptors\n\nRetrieves the force descriptors (if available) in the Configuration c. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_forces-Tuple{Configuration}","page":"API","title":"PotentialLearning.get_forces","text":"get_forces(c::Configuration) <: Forces\n\nRetrieves the forces (if available) in the Configuration c. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_inclusion_prob-Tuple{kDPP}","page":"API","title":"PotentialLearning.get_inclusion_prob","text":"get_inclusion_prob(dpp::kDPP) <: Vector{Float64}\n\nAccess an approximation to the inclusion probabilities as calculated by Determinantal.jl (see package for details).\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_input-Tuple{Any}","page":"API","title":"PotentialLearning.get_input","text":"get_input(args)\n\nargs: vector of arguments (strings)\n\nReturns an OrderedDict with the arguments. See https://github.com/cesmix-mit/AtomisticComposableWorkflows documentation for information about how to define the input arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_local_descriptors-Tuple{Configuration}","page":"API","title":"PotentialLearning.get_local_descriptors","text":"get_local_descriptors(c::Configuration) <: LocalDescriptors\n\nRetrieves the local descriptors (if available) in the Configuration c. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_metrics-NTuple{11, Any}","page":"API","title":"PotentialLearning.get_metrics","text":"get_metrics( e_train_pred, e_train, f_train_pred, f_train,\n             e_test_pred, e_test, f_test_pred, f_test,\n             B_time, dB_time, time_fitting)\n\ne_train_pred: vector of predicted training energy values. e_train: vector of true training energy values. f_train_pred: vector of predicted training force values. f_train: vector of true training force values. e_test_pred: vector of predicted test energy values. e_test: vector of true test energy values. f_test_pred: vector of predicted test force values. f_test: vector of true test force values. B_time: elapsed time consumed by descriptors calculation. dB_time: elapsed time consumed by descriptor derivatives calculation. time_fitting: elapsed time consumed by fitting process.\n\nComputes MAE, RMSE, and RSQ for training and testing energies and forces. Also add elapsed times about descriptors and fitting calculations. Returns an OrderedDict with the information above.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_metrics-NTuple{4, Any}","page":"API","title":"PotentialLearning.get_metrics","text":"get_metrics( e_train_pred, e_train, e_test_pred, e_test)\n\ne_train_pred: vector of predicted training energy values. e_train: vector of true training energy values. e_test_pred: vector of predicted test energy values. e_test: vector of true test energy values.\n\nComputes MAE, RMSE, and RSQ for training and testing energies. Returns an OrderedDict with the information above.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_metrics-Tuple{Any, Any}","page":"API","title":"PotentialLearning.get_metrics","text":"get_metrics(\n    x_pred,\n    x;\n    metrics = [mae, rmse, rsq],\n    label = \"x\"\n)\n\nx_pred: vector of predicted forces, x: vector of true forces. metrics: vector of metrics. label: label used as prefix in dictionary keys.\n\nReturns and OrderedDict with different metrics.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_positions-Tuple{Configuration}","page":"API","title":"PotentialLearning.get_positions","text":"get_positions(c::Configuration) <: Vector{SVector}\n\nRetrieves the AtomsBase system positions (if available) in the Configuration c. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_random_subset","page":"API","title":"PotentialLearning.get_random_subset","text":"get_random_subset(r::Random, batch_size :: Int) <: Vector{Int64}\n\nAccess a random subset of the data as sampled from the provided k-DPP. Returns the indices of the random subset and the subset itself.\n\n\n\n\n\n","category":"function"},{"location":"api/#PotentialLearning.get_random_subset-2","page":"API","title":"PotentialLearning.get_random_subset","text":"function get_random_subset(\n    s::DBSCANSelector,\n    batch_size = s.sample_size\n)\n\nReturns a random subset of indexes composed of samples of size batch_size ÷ length(s.clusters) from each cluster in s.\n\n\n\n\n\n","category":"function"},{"location":"api/#PotentialLearning.get_random_subset-Tuple{kDPP}","page":"API","title":"PotentialLearning.get_random_subset","text":"get_random_subset(dpp::kDPP, batch_size :: Int) <: Vector{Int64}\n\nAccess a random subset of the data as sampled from the provided k-DPP. Returns the indices of the random subset and the subset itself.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_species-Tuple{DataSet}","page":"API","title":"PotentialLearning.get_species","text":"function get_species(     ds::DataSet )\n\nGet species from a dataset.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_system-Tuple{Configuration}","page":"API","title":"PotentialLearning.get_system","text":"get_system(c::Configuration) <: AtomsBase.AbstractSystem\n\nRetrieves the AtomsBase system (if available) in the Configuration c. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_values-Tuple{Energy}","page":"API","title":"PotentialLearning.get_values","text":"get_values(e::Energy) <: Real\n\nGet the underlying real value (= e.d)\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.get_values-Tuple{StaticArraysCore.SVector}","page":"API","title":"PotentialLearning.get_values","text":"get_values(v::SVector)\n\nRemoves units from a position.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.hyperlearn!-Tuple{DataType, OrderedCollections.OrderedDict, DataSet}","page":"API","title":"PotentialLearning.hyperlearn!","text":"function hyperlearn!(     model::DataType,     pars::OrderedDict,     conftrain::DataSet;     nsamples = 5,     sampler = RandomSampler(),     loss = loss,     ws = [1.0, 1.0],     int = true )\n\nHyper-parameter optimization of linear interatomic potentials.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.hyperloss-Tuple{OrderedCollections.OrderedDict}","page":"API","title":"PotentialLearning.hyperloss","text":"function hyperloss(     metrics::OrderedDict:     we       = 1.0,     wf       = 1.0,     wt       = 1.0E-3,     emaemax = 0.05,     fmae_max = 0.05 )\n\nmetrics: OrderedDict object with metrics of the fitting process.      - Mean absolute error of energies: emae.     - Mean absolute error of forces: fmae.     - Time per force per atom: timeus. `we: energy weight.wf: force weight.wt: time weight.emaemax: maximum mean absolute error for energies.fmaemax`: maximum mean absolute error for forces.\n\nLoss function for hyper-parameter optimization: minimizes fitting error and time.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.kabsch-Tuple{Matrix{Float64}, Matrix{Float64}}","page":"API","title":"PotentialLearning.kabsch","text":"function kabsch(\n    reference::Array{Float64,2},\n    coords::Array{Float64,2}\n)\n\nInput: two sets of points: reference, coords as Nx3 Matrices (so)  Returns optimally rotated matrix \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.kabsch_rmsd-Tuple{Matrix{Float64}, Matrix{Float64}}","page":"API","title":"PotentialLearning.kabsch_rmsd","text":"function kabsch_rmsd(\n    P::Array{Float64,2},\n    Q::Array{Float64,2}\n)\n\nDirectly return RMSD for matrices P, Q for convenience.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.learn!-Tuple{InteratomicPotentials.LinearBasisPotential, DataSet, Vararg{Any}}","page":"API","title":"PotentialLearning.learn!","text":"function learn!(     iap::InteratomicPotentials.LinearBasisPotential,     ds::DataSet,     args... )\n\nLearning dispatch function, common to ordinary and weghted least squares implementations.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.learn!-Tuple{PotentialLearning.CovariateLinearProblem, Real}","page":"API","title":"PotentialLearning.learn!","text":"function learn!(     lp::CovariateLinearProblem,     α::Real )\n\nFit a Gaussian distribution by finding the MLE of the following log probability:     ℓ(β, σe, σf) = -0.5(e - A_e *β)'(e - Ae * β) / σe - 0.5*(f - Af β)'(f - A_f * β) / σf - log(σe) - log(σf)\n\nthrough an optimization procedure. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.learn!-Tuple{PotentialLearning.CovariateLinearProblem, SubsetSelector, Real}","page":"API","title":"PotentialLearning.learn!","text":"function learn!(     lp::CovariateLinearProblem,     ss::SubsetSelector,     α::Real;     num_steps=100,     opt=Flux.Optimise.Adam() )\n\nFit a Gaussian distribution by finding the MLE of the following log probability:     ℓ(β, σe, σf) = -0.5(e - A_e *β)'(e - Ae * β) / σe - 0.5*(f - Af β)'(f - A_f * β) / σf - log(σe) - log(σf)\n\nthrough an iterative batch gradient descent optimization proceedure where the batches are provided by the subset selector. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.learn!-Tuple{PotentialLearning.CovariateLinearProblem, Vector, Bool}","page":"API","title":"PotentialLearning.learn!","text":"function learn!(     lp::CovariateLinearProblem,     ws::Vector,     int::Bool )\n\nFit energies and forces using weighted least squares.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.learn!-Tuple{PotentialLearning.LearningProblem, SubsetSelector}","page":"API","title":"PotentialLearning.learn!","text":"function learn!(     lp::LearningProblem,     ss::SubsetSelector;     num_steps = 100::Int,     opt = Flux.Optimisers.Adam() )\n\nAttempts to fit the parameters lp.params in the learning problem lp using batch gradient descent with the optimizer opt and num_steps number of iterations. Batching is provided by the passed ss::SubsetSelector. \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.learn!-Tuple{PotentialLearning.LearningProblem}","page":"API","title":"PotentialLearning.learn!","text":"function learn!(     lp::LearningProblem;     num_steps=100::Int,     opt=Flux.Optimisers.Adam() )\n\nAttempts to fit the parameters lp.params in the learning problem lp using gradient descent with the optimizer opt and num_steps number of iterations.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.learn!-Tuple{PotentialLearning.LinearProblem}","page":"API","title":"PotentialLearning.learn!","text":"function learn!(     lp::LinearProblem )\n\nDefault learning problem: weighted least squares.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.learn!-Tuple{PotentialLearning.UnivariateLinearProblem, Real}","page":"API","title":"PotentialLearning.learn!","text":"function learn!(     lp::UnivariateLinearProblem,     α::Real )\n\nFit a univariate Gaussian distribution for the equation y = Aβ + ϵ, where β are model coefficients and ϵ ∼ N(0, σ). Fitting is done via SVD on the design matrix, A'*A (formed iteratively), where eigenvalues less than α are cut-off.  \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.learn!-Tuple{PotentialLearning.UnivariateLinearProblem, SubsetSelector, Real}","page":"API","title":"PotentialLearning.learn!","text":"function learn!(     lp::UnivariateLinearProblem,     ss::SubsetSelector,     α::Real;     num_steps = 100,     opt = Flux.Optimise.Adam() )\n\nFit a univariate Gaussian distribution for the equation y = Aβ + ϵ, where β are model coefficients and ϵ ∼ N(0, σ). Fitting is done via batched gradient descent with batches provided by the subset selector and the gradients are calculated using Flux.  \n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.learn!-Tuple{PotentialLearning.UnivariateLinearProblem, Vector, Bool}","page":"API","title":"PotentialLearning.learn!","text":"function learn!(     lp::UnivariateLinearProblem,     ws::Vector,     int::Bool )\n\nFit energies using weighted least squares.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.linearize_forces-Tuple{Any}","page":"API","title":"PotentialLearning.linearize_forces","text":"linearize_forces(forces)\n\nforces: vector of forces per system\n\nReturns a vector with the components of the forces of the systems.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.load_data-Tuple{Any, ExtXYZ}","page":"API","title":"PotentialLearning.load_data","text":"load_data(file::string, extxyz::ExtXYZ)\nLoad configuration from an extxyz file into a DataSet\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.load_data-Tuple{String, YAML}","page":"API","title":"PotentialLearning.load_data","text":"load_data(file::string, yaml::YAML)\n\nLoad configurations from a yaml file into a Vector of Flexible Systems, with Energies and Force.\nReturns \n    ds - DataSet\n    t = Vector{Dict} (any miscellaneous info from yaml file)\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.load_datasets-Tuple{Any}","page":"API","title":"PotentialLearning.load_datasets","text":"load_datasets(input)\n\ninput: OrderedDict with input arguments. See get_defaults_args().\n\nReturns training and test systems, energies, forces, and stresses.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.mae-Tuple{Any, Any}","page":"API","title":"PotentialLearning.mae","text":"mae(x_pred, x)\n\nx_pred: vector of predicted values. E.g. predicted energies. x: vector of true values. E.g. DFT energies.\n\nReturns mean absolute error.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.mean_cos-Tuple{Any, Any}","page":"API","title":"PotentialLearning.mean_cos","text":"mean_cos(x_pred, x)\n\nx_pred: vector of predicted forces, x: vector of true forces.\n\nReturns mean cosine.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.periodic_rmsd-Tuple{Matrix{Float64}, Matrix{Float64}, Vector{Float64}}","page":"API","title":"PotentialLearning.periodic_rmsd","text":"function periodic_rmsd(\n    p1::Array{Float64,2},\n    p2::Array{Float64,2},\n    box_lengths::Array{Float64,1}\n)\n\nCalculates the RMSD between atom positions of two configurations taking into account the periodic boundaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.potential_energy-Tuple{Configuration, InteratomicPotentials.BasisPotential}","page":"API","title":"PotentialLearning.potential_energy","text":"function potential_energy(     c::Configuration,     bp::BasisPotential )\n\nc: atomic configuration. bp: basis potential.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.potential_energy-Tuple{Configuration, InteratomicPotentials.NNBasisPotential}","page":"API","title":"PotentialLearning.potential_energy","text":"function potential_energy(     c::Configuration,     nnbp::NNBasisPotential )\n\nc: atomic configuration. nnbp: neural network basis potential.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.rmsd-Tuple{Matrix{Float64}, Matrix{Float64}}","page":"API","title":"PotentialLearning.rmsd","text":"function rmsd(\n    A::Array{Float64,2},\n    B::Array{Float64,2}\n)\n\nCalculate root mean square deviation of two matrices A, B. See http://en.wikipedia.org/wiki/Root-mean-squaredeviationofatomicpositions\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.rmse-Tuple{Any, Any}","page":"API","title":"PotentialLearning.rmse","text":"rmse(x_pred, x)\n\nx_pred: vector of predicted values. E.g. predicted energies. x: vector of true values. E.g. DFT energies.\n\nReturns mean root mean square error.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.rsq-Tuple{Any, Any}","page":"API","title":"PotentialLearning.rsq","text":"rsq(x_pred, x)\n\nx_pred: vector of predicted values. E.g. predicted energies. x: vector of true values. E.g. DFT energies.\n\nReturns R-squared.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.sample-Tuple{Any, Any}","page":"API","title":"PotentialLearning.sample","text":"function sample(\n    c,\n    batch_size\n)\n\nSelect from cluster c a sample of size batch_size.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.to_num-Tuple{Any}","page":"API","title":"PotentialLearning.to_num","text":"to_num(str)\n\nstr: string with a number: integer or float\n\nReturns an integer or float.\n\n\n\n\n\n","category":"method"},{"location":"api/#PotentialLearning.translate_points-Tuple{Matrix{Float64}, Matrix{Float64}}","page":"API","title":"PotentialLearning.translate_points","text":"function translate_points(\n    P::Array{Float64,2},\n    Q::Array{Float64,2}\n)\n\nTranslate P, Q so centroids are equal to the origin of the coordinate system Translation der Massenzentren, so dass beide Zentren im Ursprung des Koordinatensystems liegen\n\n\n\n\n\n","category":"method"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"EditURL = \"../../../../examples/PCA-ACE-aHfO2/fit-pca-ace-ahfo2.jl\"","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/#Reduce-ACE-descriptors-with-PCA-and-fit-a-HfO2-dataset","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"","category":"section"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/#a.-Load-packages,-define-paths,-and-create-experiment-folder.","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"a. Load packages, define paths, and create experiment folder.","text":"","category":"section"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Load packages.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"using AtomsBase, InteratomicPotentials, PotentialLearning\nusing Unitful, UnitfulAtomic\nusing LinearAlgebra, Random, DisplayAs","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Define paths.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"path = joinpath(dirname(pathof(PotentialLearning)), \"../examples/PCA-ACE-aHfO2\")\nds_path =  \"$path/../data/a-HfO2/a-HfO2-300K-NVT-6000.extxyz\"\nres_path = \"$path/results/\";\nnothing #hide","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Load utility functions.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"include(\"$path/../utils/utils.jl\")","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Create experiment folder.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"run(`mkdir -p $res_path`);\nnothing #hide","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/#b.-Load-atomistic-dataset-and-split-it-into-training-and-test.","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"b. Load atomistic dataset and split it into training and test.","text":"","category":"section"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Load atomistic dataset: atomistic configurations (atom positions, geometry, etc.) + DFT data (energies, forces, etc.)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"ds = load_data(ds_path, uparse(\"eV\"), uparse(\"Å\"))[1:1000] # Only first 1K samples are used in this example.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Split atomistic dataset into training and test.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"n_train, n_test = 50, 50 # Only 50 samples per dataset are used in this example.\nconf_train, conf_test = split(ds, n_train, n_test)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/#c.-Create-ACE-basis,-compute-descriptors-and-add-them-to-the-dataset.","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"c. Create ACE basis, compute descriptors and add them to the dataset.","text":"","category":"section"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Create ACE basis.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"basis = ACE(species           = [:Hf, :O],\n            body_order        = 3,\n            polynomial_degree = 4,\n            rcutoff           = 5.0,\n            wL                = 1.0,\n            csp               = 1.0,\n            r0                = 1.0)\n@save_var res_path basis;\nnothing #hide","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Compute ACE descriptors for energy and forces based on the atomistic training configurations.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"println(\"Computing energy descriptors of training dataset...\")\ne_descr_train = compute_local_descriptors(conf_train, basis;\n                                          pbar=false)\nprintln(\"Computing force descriptors of training dataset...\")\nf_descr_train = compute_force_descriptors(conf_train, basis;\n                                          pbar=false)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Update training dataset by adding energy and force descriptors.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"ds_train = DataSet(conf_train .+ e_descr_train .+ f_descr_train)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/#d.-Dimension-reduction-of-energy-and-force-descriptors-of-training-dataset.","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"d. Dimension reduction of energy and force descriptors of training dataset.","text":"","category":"section"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"n_desc = 20\npca = PCAState(tol = n_desc)\nfit!(ds_train, pca)\ntransform!(ds_train, pca)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/#e.-Learn-ACE-coefficients-based-on-ACE-descriptors-and-DFT-data.","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"e. Learn ACE coefficients based on ACE descriptors and DFT data.","text":"","category":"section"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"println(\"Learning energies and forces...\")\nlb = LBasisPotential(basis)\nws, int = [1.0, 1.0], true\nlearn!(lb, ds_train, ws, int)\n@save_var res_path lb.β\n@save_var res_path lb.β0\nlb.β, lb.β0","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/#f.-Post-process-output:-calculate-metrics,-create-plots,-and-save-results.","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"f. Post-process output: calculate metrics, create plots, and save results.","text":"","category":"section"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Compute ACE descriptors for energy and forces based on the atomistic test configurations.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"println(\"Computing energy descriptors of test dataset...\")\ne_descr_test = compute_local_descriptors(conf_test, basis;\n                                         pbar = false)\nprintln(\"Computing force descriptors of test dataset...\")\nf_descr_test = compute_force_descriptors(conf_test, basis;\n                                         pbar = false)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Update test dataset by adding energy and force descriptors.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"ds_test = DataSet(conf_test .+ e_descr_test .+ f_descr_test)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Dimension reduction of energy and force descriptors of test dataset.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"transform!(ds_test, pca)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Get true and predicted values for energies and forces.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"n_atoms_train = length.(get_system.(ds_train))\nn_atoms_test = length.(get_system.(ds_test))\n\ne_train, e_train_pred = get_all_energies(ds_train) ./ n_atoms_train,\n                        get_all_energies(ds_train, lb) ./ n_atoms_train\nf_train, f_train_pred = get_all_forces(ds_train),\n                        get_all_forces(ds_train, lb)\n@save_var res_path e_train\n@save_var res_path e_train_pred\n@save_var res_path f_train\n@save_var res_path f_train_pred\n\ne_test, e_test_pred = get_all_energies(ds_test) ./ n_atoms_test,\n                      get_all_energies(ds_test, lb) ./ n_atoms_test\nf_test, f_test_pred = get_all_forces(ds_test),\n                      get_all_forces(ds_test, lb)\n@save_var res_path e_test\n@save_var res_path e_test_pred\n@save_var res_path f_test\n@save_var res_path f_test_pred;\nnothing #hide","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Compute training metrics.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"e_train_metrics = get_metrics(e_train, e_train_pred,\n                              metrics = [mae, rmse, rsq],\n                              label = \"e_train\")\nf_train_metrics = get_metrics(f_train, f_train_pred,\n                              metrics = [mae, rmse, rsq, mean_cos],\n                              label = \"f_train\")\ntrain_metrics = merge(e_train_metrics, f_train_metrics)\n@save_dict res_path train_metrics\ntrain_metrics","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Compute test metrics.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"e_test_metrics = get_metrics(e_test, e_test_pred,\n                             metrics = [mae, rmse, rsq],\n                             label = \"e_test\")\nf_test_metrics = get_metrics(f_test, f_test_pred,\n                             metrics = [mae, rmse, rsq, mean_cos],\n                             label = \"f_test\")\ntest_metrics = merge(e_test_metrics, f_test_metrics)\n@save_dict res_path test_metrics\ntest_metrics","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Plot and save energy results.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"e_plot = plot_energy(e_train, e_train_pred,\n                     e_test, e_test_pred)\n@save_fig res_path e_plot\nDisplayAs.PNG(e_plot)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Plot and save force results.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"f_plot = plot_forces(f_train, f_train_pred,\n                     f_test, f_test_pred)\n@save_fig res_path f_plot\nDisplayAs.PNG(f_plot)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Plot and save training force cosine.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"e_train_plot = plot_energy(e_train, e_train_pred)\nf_train_plot = plot_forces(f_train, f_train_pred)\nf_train_cos  = plot_cos(f_train, f_train_pred)\n@save_fig res_path e_train_plot\n@save_fig res_path f_train_plot\n@save_fig res_path f_train_cos\nDisplayAs.PNG(f_train_cos)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"Plot and save test force cosine.","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"e_test_plot = plot_energy(e_test, e_test_pred)\nf_test_plot = plot_forces(f_test, f_test_pred)\nf_test_cos  = plot_cos(f_test, f_test_pred)\n@save_fig res_path e_test_plot\n@save_fig res_path f_test_plot\n@save_fig res_path f_test_cos\nDisplayAs.PNG(f_test_cos)","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"","category":"page"},{"location":"generated/PCA-ACE-aHfO2/fit-pca-ace-ahfo2/","page":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","title":"Reduce ACE descriptors with PCA and fit a-HfO2 dataset","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"EditURL = \"../../../../examples/Opt-ACE-aHfO2/fit-opt-ace-ahfo2.jl\"","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/#Optimize-ACE-hyper-parameters:-minimize-force-time-and-fitting-error.","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error.","text":"","category":"section"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/#a.-Load-packages,-define-paths,-and-create-experiment-folder.","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"a. Load packages, define paths, and create experiment folder.","text":"","category":"section"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Load packages.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"using AtomsBase, InteratomicPotentials, PotentialLearning\nusing Unitful, UnitfulAtomic\nusing LinearAlgebra, Random, DisplayAs\nusing DataFrames, Hyperopt","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Define paths.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"path = joinpath(dirname(pathof(PotentialLearning)), \"../examples/Opt-ACE-aHfO2\")\nds_path =  \"$path/../data/a-HfO2/a-HfO2-300K-NVT-6000.extxyz\"\nres_path = \"$path/results/\";\nnothing #hide","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Load utility functions.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"include(\"$path/../utils/utils.jl\")","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Create experiment folder.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"run(`mkdir -p $res_path`);\nnothing #hide","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/#b.-Load-atomistic-dataset-and-split-it-into-training-and-test.","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"b. Load atomistic dataset and split it into training and test.","text":"","category":"section"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Load atomistic dataset: atomistic configurations (atom positions, geometry, etc.) + DFT data (energies, forces, etc.)","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"ds = load_data(ds_path, uparse(\"eV\"), uparse(\"Å\"))[1:1000]","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Split atomistic dataset into training and test","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"n_train, n_test = 50, 50 # Only 50 samples per dataset are used in this example.\nconf_train, conf_test = split(ds, n_train, n_test)","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/#c.-Hyper-parameter-optimization.","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"c. Hyper-parameter optimization.","text":"","category":"section"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Define a custom loss function. Here, we minimize fitting error and force calculation time. Possible metrics are e_mae, e_rmse, e_rsq, f_mae, f_rmse, f_rsq, and time_us.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"function custom_loss(\n    metrics::OrderedDict\n)\n    e_mae     = metrics[:e_mae]\n    f_mae     = metrics[:f_mae]\n    time_us   = metrics[:time_us]\n    e_mae_max = 0.05 # eV/atom\n    f_mae_max = 0.05 # eV/Å\n    w_e       = e_mae/e_mae_max\n    w_f       = f_mae/f_mae_max\n    w_t       = 1.0E-3\n    loss = w_e * e_mae + w_f * e_mae + w_t * time_us\n    return loss\nend;\nnothing #hide","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Define model and hyper-parameter value ranges to be optimized.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"model = ACE\npars = OrderedDict( :body_order        => [2, 3, 4],\n                    :polynomial_degree => [3, 4, 5],\n                    :rcutoff           => LinRange(3.5, 6.5, 10),\n                    :wL                => LinRange(0.3, 1.8, 10),\n                    :csp               => LinRange(0.3, 1.8, 10),\n                    :r0                => LinRange(0.3, 1.8, 10));\nnothing #hide","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Use random sampling to find the optimal hyper-parameters.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"iap, res = hyperlearn!(model, pars, conf_train;\n                       n_samples = 10, sampler = RandomSampler(),\n                       loss = custom_loss, ws = [1.0, 1.0], int = true);\nnothing #hide","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Save and show results.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"@save_var res_path iap.β\n@save_var res_path iap.β0\n@save_var res_path iap.basis\n@save_dataframe res_path res\nres","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Plot error vs time.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"err_time = plot_err_time(res)\n@save_fig res_path err_time\nDisplayAs.PNG(err_time)","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Alternatively, use latin hypercube sampling to find the optimal hyper-parameters.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"sampler = CLHSampler(dims=[Categorical(3), Categorical(3), Continuous(),\n                           Continuous(), Continuous(), Continuous()])\niap2, res2 = hyperlearn!(model, pars, conf_train;\n                         n_samples = 10, sampler = sampler,\n                         loss = custom_loss, ws = [1.0, 1.0], int = true);\nnothing #hide","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Save and show results.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"@save_var res_path iap2.β\n@save_var res_path iap2.β0\n@save_var res_path iap2.basis\n@save_dataframe res_path res2\nres2","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"Plot error vs time.","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"err_time2 = plot_err_time(res2)\n@save_fig res_path err_time2\nDisplayAs.PNG(err_time2)","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"","category":"page"},{"location":"generated/Opt-ACE-aHfO2/fit-opt-ace-ahfo2/","page":"Optimize ACE hyper-parameters: minimize force time and fitting error","title":"Optimize ACE hyper-parameters: minimize force time and fitting error","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"EditURL = \"../../../../examples/DPP-ACE-Na/fit-dpp-ace-na.jl\"","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/#Subsample-Na-dataset-with-DPP-and-fit-energies-with-ACE","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit energies with ACE","text":"","category":"section"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/#a.-Load-packages-and-define-paths.","page":"Subsample Na dataset with DPP and fit with ACE","title":"a. Load packages and define paths.","text":"","category":"section"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Load packages.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"using Unitful, UnitfulAtomic\nusing AtomsBase, InteratomicPotentials, PotentialLearning\nusing LinearAlgebra, Plots","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Define paths.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"path = joinpath(dirname(pathof(PotentialLearning)), \"../examples/DPP-ACE-Na\")\nds_path = \"$path/../data/Na/liquify_sodium.yaml\";\nnothing #hide","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/#b.-Load-atomistic-dataset-and-split-it-into-training-and-test.","page":"Subsample Na dataset with DPP and fit with ACE","title":"b. Load atomistic dataset and split it into training and test.","text":"","category":"section"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Load atomistic dataset: atomistic configurations (atom positions, geometry, etc.) + DFT data (energies, forces, etc.).","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"confs, thermo = load_data(ds_path, YAML(:Na, u\"eV\", u\"Å\"))\nconfs, thermo = confs[220:end], thermo[220:end]","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Split atomistic dataset into training and test.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"conf_train, conf_test = confs[1:1000], confs[1001:end]","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/#c.-Create-ACE-basis,-compute-energy-descriptors-and-add-them-to-the-dataset.","page":"Subsample Na dataset with DPP and fit with ACE","title":"c. Create ACE basis, compute energy descriptors and add them to the dataset.","text":"","category":"section"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Create ACE basis.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"ace = ACE(species = [:Na],         # species\n          body_order = 4,          # 4-body\n          polynomial_degree = 8,   # 8 degree polynomials\n          wL = 1.0,                # Defaults, See ACE.jl documentation\n          csp = 1.0,               # Defaults, See ACE.jl documentation\n          r0 = 1.0,                # minimum distance between atoms\n          rcutoff = 5.0)           # cutoff radius","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Update training dataset by adding energy (local) descriptors.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"println(\"Computing local descriptors of training dataset\")\ne_descr_train = compute_local_descriptors(conf_train, ace) # JLD.load(\"data/sodium_empirical_full.jld\", \"descriptors\")","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Update training dataset by adding energy and force descriptors.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"ds_train = DataSet(conf_train .+ e_descr_train)","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/#d.-Subsampling-via-DPP.","page":"Subsample Na dataset with DPP and fit with ACE","title":"d. Subsampling via DPP.","text":"","category":"section"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Create DPP subselector.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"dpp = kDPP(ds_train, GlobalMean(), DotProduct(); batch_size = 200)","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Subsample trainig dataset.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"dpp_inds = get_random_subset(dpp)","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/#e.-Learn-ACE-coefficients-based-on-ACE-descriptors-and-DFT-data.","page":"Subsample Na dataset with DPP and fit with ACE","title":"e. Learn ACE coefficients based on ACE descriptors and DFT data.","text":"","category":"section"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"lb = LBasisPotential(ace)\nα = 1e-8\nΣ = learn!(lb, ds_train[dpp_inds], α)","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/#f.-Post-process-output:-calculate-metrics,-create-plots,-and-save-results.","page":"Subsample Na dataset with DPP and fit with ACE","title":"f. Post-process output: calculate metrics, create plots, and save results.","text":"","category":"section"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Update test dataset by adding energy descriptors.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"println(\"Computing local descriptors of test dataset\")\ne_descr_test = compute_local_descriptors(conf_test, ace)\nds_test = DataSet(conf_test .+ e_descr_test)","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Get true and predicted energy values (assuming that all configurations have the same no. of atoms).","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"n = size(get_system(ds_train[1]))[1]\ne_train, e_train_pred = get_all_energies(ds_train)/n, get_all_energies(ds_train, lb)/n\ne_test, e_test_pred   = get_all_energies(ds_test)/n, get_all_energies(ds_test, lb)/n","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Compute and print metrics.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"e_mae, e_rmse, e_rsq = calc_metrics(e_train, e_train_pred)\nprintln(\"MAE: $e_mae, RMSE: $e_rmse, RSQ: $e_rsq\")","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"Plot energy error.","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"e_err_train, e_err_test = (e_train_pred - e_train), (e_test_pred - e_test)\ndpp_inds2 = get_random_subset(dpp; batch_size = 20)\np = scatter( e_train, e_err_train, label = \"Training\", color = :blue,\n         markersize = 1.5, markerstrokewidth=0)\nscatter!(e_test, e_err_test, label = \"Test\", color = :yellow,\n         markersize = 1.5, markerstrokewidth=0)\nscatter!(e_train[dpp_inds2], e_err_train[dpp_inds2],\n         color = :darkred, label = \"DPP Samples\",\n         markersize = 2.5, markerstrokewidth=0)\nscatter!(xlabel = \"Energy (eV/atom)\", ylabel = \"Error (eV/atom)\",\n         dpi = 1000, fontsize = 16)","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"","category":"page"},{"location":"generated/DPP-ACE-Na/fit-dpp-ace-na/","page":"Subsample Na dataset with DPP and fit with ACE","title":"Subsample Na dataset with DPP and fit with ACE","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"EditURL = \"../../../../examples/LJ-Ar/lennard-jones-ar.jl\"","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/#Load-Ar-dataset-with-energies-computed-by-Lennard-Jones-and-postprocess","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar dataset with energies computed by Lennard-Jones and postprocess","text":"","category":"section"},{"location":"generated/LJ-Ar/lennard-jones-ar/#a.-Load-packages-and-define-paths.","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"a. Load packages and define paths.","text":"","category":"section"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"Load packages.","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"using Unitful, UnitfulAtomic\nusing AtomsBase, InteratomicPotentials, PotentialLearning\nusing LinearAlgebra, Plots, DisplayAs","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"Define paths.","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"path = joinpath(dirname(pathof(PotentialLearning)), \"../examples/LJ-Ar\")\nds_path = \"$path/../data/LJ-AR/lj-ar.yaml\";\nnothing #hide","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/#b.-Load-atomistic-dataset.","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"b. Load atomistic dataset.","text":"","category":"section"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"ds, thermo = load_data(ds_path, YAML(:Ar, u\"eV\", u\"Å\"))\nds = @views ds[2:end] # Filter first configuration (zero energy)","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/#c.-Compute-distance-from-origin,-extract-LJ-energies,-and-define-time-range.","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"c. Compute distance from origin, extract LJ energies, and define time range.","text":"","category":"section"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"Get atom positions and compute distance from origin.","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"systems = get_system.(ds)\nn_atoms = length(first(systems)) # Note: in this dataset all systems contain the same no. of atoms\npositions = position.(systems)\ndists_origin = map(x->ustrip.(norm.(x)), positions)","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"Extract LJ energies from dataset.","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"energies = get_values.(get_energy.(ds))","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"Define time range.","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"time_range = 0.5:0.5:5000","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/#d.-Post-process-data.","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"d. Post-process data.","text":"","category":"section"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"Plot distance from origin vs time.","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"p = plot(xlabel = \"τ | ps\",\n         ylabel = \"Distance from origin | Å\",\n         dpi = 300, fontsize = 12)\nfor i = 1:n_atoms\n    plot!(time_range, map(x->x[i], dists_origin), label=\"\")\nend\nDisplayAs.PNG(p)","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"Plot LJ energies vs time.","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"p = plot(time_range, energies,\n         xlabel = \"τ | ps\",\n         ylabel = \"Lennard Jones energy | eV\",\n         dpi = 300, fontsize = 12)\nDisplayAs.PNG(p)","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"","category":"page"},{"location":"generated/LJ-Ar/lennard-jones-ar/","page":"Load Ar+Lennard-Jones dataset and postprocess","title":"Load Ar+Lennard-Jones dataset and postprocess","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#PotentialLearning.jl","page":"Home","title":"PotentialLearning.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Optimize your atomistic data and interatomic potential models in your molecular dynamic workflows.","category":"page"},{"location":"#Reduce-expensive-Density-functional-theory-calculations","page":"Home","title":"Reduce expensive Density functional theory calculations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Reduce expensive Density functional theory calculations while maintaining training accuracy by intelligently subsampling your atomistic dataset:","category":"page"},{"location":"","page":"Home","title":"Home","text":"1 - Subsample your atomistic configurations using a Determinantal Point Process (DPP) based algorithm that compares energy descriptors computed with the Atomic Cluster Expansion (ACE).","category":"page"},{"location":"","page":"Home","title":"Home","text":"ds = DataSet(conf_train .+ e_descr)\ndataset_selector = kDPP(ds, GlobalMean(), DotProduct())\ninds = get_random_subset(dataset_selector)\nconf_train = @views conf_train[inds]","category":"page"},{"location":"","page":"Home","title":"Home","text":"2 - Export the reduced dataset, use Density functional theory (DFT) on it, and fit your model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See example.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We are working to provide different intelligent subsampling algorithms based on DPP, DBSCAN, and CUR; highly scalable parallel subsampling via hierarchical subsampling and distributed parallelism; and optimal subsampler selection.","category":"page"},{"location":"#Get-fast-and-accurate-interatomic-potential-models","page":"Home","title":"Get fast and accurate interatomic potential models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Get fast and accurate interatomic potential models through parallel multi-objective hyper-parameter optimization:","category":"page"},{"location":"","page":"Home","title":"Home","text":"1 - Define the interatomic potential model, hyper-parameter value ranges, and custom loss function. Then, optimize your model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"model = ACE\npars = OrderedDict( :body_order        => [2, 3, 4],\n                    :polynomial_degree => [3, 4, 5], ...)\nfunction custom_loss(metrics::OrderedDict)\n    ...\n    return w_e * e_mae + w_f * f_mae + w_t * time_us\nend\niap, res = hyperlearn!(model, pars, conf_train; loss = custom_loss);","category":"page"},{"location":"","page":"Home","title":"Home","text":"2 - Export optimal values to your molecular dynamic workflow.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See example.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The models are compatible with the interfaces of our sister package InteratomicPotentials.jl. In particular, we are interested in maintaining compatibility with ACESuit, as well as integrating LAMMPS based potentials such as ML-POD and ML-PACE. We are also working to provide neural network potential architecture optimization.","category":"page"},{"location":"#Compress-interatomic-potential-data-and-model","page":"Home","title":"Compress interatomic potential data and model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Compress interatomic potential data and model using dimensionality reduction of energy and force descriptors:","category":"page"},{"location":"","page":"Home","title":"Home","text":"1 - Define a PCA state, fit PCA with your the energy and force descriptors of your dataset, and transform all dataset descriptors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"pca = PCAState(tol = n_desc)\nfit!(ds_train, pca)\ntransform!(ds_train, pca)","category":"page"},{"location":"","page":"Home","title":"Home","text":"2 - Export PCA fitted data to be used in your workflow.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See example.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We are working to provide feature selection of energy and force descriptors based on CUR.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally, this package includes utilities for loading input data (such as XYZ files), computing various metrics (including MAE, MSE, RSQ, and COV), exporting results, and generating plots.","category":"page"},{"location":"#Acknowledgment","page":"Home","title":"Acknowledgment","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Center for the Exascale Simulation of Materials in Extreme Environments (CESMIX). Massachusetts Institute of Technology (MIT).","category":"page"},{"location":"install-and-run-examples/#Install-package-and-run-examples","page":"Install and run examples","title":"Install package and run examples","text":"","category":"section"},{"location":"install-and-run-examples/#Add-registries-and-package","page":"Install and run examples","title":"Add registries and package","text":"","category":"section"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"Open a Julia REPL ($ julia), type ] to enter the Pkg REPL, and add the following registries:","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"    pkg> registry add https://github.com/JuliaRegistries/General\n    pkg> registry add https://github.com/cesmix-mit/CESMIX.git \n    pkg> registry add https://github.com/JuliaMolSim/MolSim.git\n    pkg> registry add https://github.com/ACEsuit/ACEregistry","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"Then, add PotentialLearning:","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"    pkg> add PotentialLearning\n","category":"page"},{"location":"install-and-run-examples/#Clone-repository-and-access-an-example-folder","page":"Install and run examples","title":"Clone repository and access an example folder","text":"","category":"section"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"Clone PotentialLearning.jl repository in your working directory.","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"    $ git clone git@github.com:cesmix-mit/PotentialLearning.jl.git","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"Access to any folder within PotentialLearning.jl/examples. E.g.","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"    $ cd PotentialLearning.jl/examples/DPP-ACE-aHfO2-1","category":"page"},{"location":"install-and-run-examples/#Run-example","page":"Install and run examples","title":"Run example","text":"","category":"section"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"Open a Julia REPL, activate the examples folder project, and define the number of threads.","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"    $ julia --project=./ --threads=4","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"Type ] to enter the Pkg REPL and instantiate.","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"    pkg> instantiate","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"Finally, include the example file.","category":"page"},{"location":"install-and-run-examples/","page":"Install and run examples","title":"Install and run examples","text":"    julia> include(\"fit-dpp-ace-ahfo2.jl\")","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"EditURL = \"../../../../examples/DPP-ACE-Si/fit-dpp-ace-si.jl\"","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/#Subsample-Si-dataset-and-fit-with-ACE","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset and fit with ACE","text":"","category":"section"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/#a.-Load-packages,-define-paths,-and-create-experiment-folder.","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"a. Load packages, define paths, and create experiment folder.","text":"","category":"section"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"Load packages.","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"using LinearAlgebra, Random, InvertedIndices\nusing Statistics, StatsBase, Distributions, Determinantal\nusing Unitful, UnitfulAtomic\nusing AtomsBase, InteratomicPotentials, PotentialLearning\nusing CSV, JLD, DataFrames","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"Define atomic type information.","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"elname, elspec = \"Si\", [:Si]","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"Define paths.","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"path = joinpath(dirname(pathof(PotentialLearning)), \"../examples/DPP-ACE-Si\")\ninpath = \"$path/../data/Si-3Body-LAMMPS/\"\noutpath = \"$path/output/$elname/\"","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"Load utility functions.","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"include(\"$path/subsampling_utils.jl\")","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/#b.-Load-atomistic-datasets.","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"b. Load atomistic datasets.","text":"","category":"section"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"Load all atomistic datasets: atomistic configurations (atom positions, geometry, etc.) + DFT data (energies, forces, etc.)","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"file_arr = readext(inpath, \"xyz\")\nnfile = length(file_arr)\nconfs_arr = [load_data(inpath*file, ExtXYZ(u\"eV\", u\"Å\")) for file in file_arr]\nconfs = concat_dataset(confs_arr)","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"Id of configurations per file.","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"n = 0\nconfs_id = Vector{Vector{Int64}}(undef, nfile)\nfor k = 1:nfile\n    global n\n    confs_id[k] = (n+1):(n+length(confs_arr[k]))\n    n += length(confs_arr[k])\nend","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/#c.-Subsampling-by-DPP.","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"c. Subsampling by DPP.","text":"","category":"section"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"Create ACE basis.","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"nbody = 4\ndeg = 5\nace = ACE(species = elspec,             # species\n          body_order = nbody,           # n-body\n          polynomial_degree = deg,      # degree of polynomials\n          wL = 1.0,                     # Defaults, See ACE.jl documentation\n          csp = 1.0,                    # Defaults, See ACE.jl documentation\n          r0 = 1.0,                     # minimum distance between atoms\n          rcutoff = 10.0)","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"Compute ACE descriptors for energies and forces.","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"println(\"Computing local descriptors\")\ne_descr = compute_local_descriptors(confs, ace; pbar=false)\nf_descr = compute_force_descriptors(confs, ace; pbar=false)\nJLD.save(outpath*\"$(elname)_energy_descriptors.jld\", \"e_descr\", e_descr)\nJLD.save(outpath*\"$(elname)_force_descriptors.jld\", \"f_descr\", f_descr)","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"Update training dataset by adding energy and force descriptors.","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"ds = DataSet(confs .+ e_descr .+ f_descr)\nndata = length(ds)","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/#d.-Compute-cross-validation-error-from-training-dataset.","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"d. Compute cross validation error from training dataset.","text":"","category":"section"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"batch_size = [80, 40]\nsel_ind = Dict{Int64, Vector}()\ncond_num = Dict{Int64, Vector}()\n\nfor bs in batch_size\n    println(\"=============== Starting batch size $bs ===============\")\n    sel_ind[bs], cond_num[bs] = cross_validation_training(ds; ndiv=5, dpp_batch=bs)\n    println(\"condnum: $(cond_num[bs])\")\nend\n\nJLD.save(outpath*\"$(elname)_ACE-$(nbody)-$(deg)_DPP_indices_and_condnum.jld\",\n    \"ind\", sel_ind,\n    \"condnum\", cond_num)","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"","category":"page"},{"location":"generated/DPP-ACE-Si/fit-dpp-ace-si/","page":"Subsample Si dataset with DPP, fit with ACE, and cross validate","title":"Subsample Si dataset with DPP, fit with ACE, and cross validate","text":"This page was generated using Literate.jl.","category":"page"}]
}
